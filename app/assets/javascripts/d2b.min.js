!function(t,e){"use strict";function r(t,e){if("undefined"==typeof document)return e;t=t||"";var r=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");return n.type="text/css",n.styleSheet?n.styleSheet.cssText=t:n.appendChild(document.createTextNode(t)),r.appendChild(n),e}function n(t){return"function"==typeof t?t:function(){return t}}function a(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t){return t.label},a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1/0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"start";r=n(r),t.each(function(t,n){var i=e.select(this),l=(""+r.call(this,t,n)).split(/\s+/).reverse(),c=void 0,d=[],u=[l.pop()],s=1.1,p=+i.attr("x"),b=+i.attr("y"),h=parseFloat(i.attr("dy"))||0;for((i.html()||"").indexOf("tspan")===-1&&i.text(""),c=l.pop();c;)u.join(" ").length+c.length>a&&(d.push(u),u=[]),u.push(c),c=l.pop();d.push(u);var f=i.selectAll("tspan").data(d),g=(d.length-1)*s,v="end"===o?g:"middle"===o?g/2:0;f.merge(f.enter().append("tspan")).text(function(t){return t.join(" ")}).attr("x",p).attr("y",b).attr("dy",function(t,e){return h+e*s-v+"em"})})}function o(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;t.each(function(){var t=e.select(this),n=t.text().split(/\s+/).reverse(),a=void 0,o=[],i=0,l=1.1,c=parseFloat(t.attr("y"))||0,d=parseFloat(t.attr("dy"))||0,u=t.text(null).append("tspan").attr("x",0).attr("y",c).attr("dy",d+"em");for(a=n.pop();a;)o.push(a),u.text(o.join(" ")),u.node().getComputedTextLength()>r&&(o.pop(),u.text(o.join(" ")),o=[a],u=t.append("tspan").attr("x",0).attr("y",c).attr("dy",++i*l+d+"em").text(a)),a=n.pop()})}function i(t,e){var r={};for(var n in t)"function"!=typeof t[n]&&e.indexOf(n)<0&&(r[n]=t[n]);return r}function l(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{omit:["data"]};return t.selection?void t.attrTween("d",function(t){var a=this;t=i(t,n.omit),this.current=this.current||t;var o=e.interpolate(this.current,t);return function(t){return a.current=o(t),r(a.current)}}):t.attr("d",function(t){return this.current=i(t,n.omit),r(t)})}function c(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return isNaN(t)||null===t?e:t}function d(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t){return t},a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(t){return t};return r=n(r),t.selection?void t.tween("text",function(t,n){var o=this,i=c(r.call(this,t,n));this.current=c(this.current,i);var l=e.interpolate(this.current,i);return function(t){o.textContent=a(o.current=l(t))}}):t.text(function(t,e){return this.current=c(r.call(this,t,e)),a(this.current)})}function u(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{omit:["data"]};return t.selection?void t.attrTween("transform",function(t){var a=this;t=i(t,n.omit),this.current=this.current||t;var o=e.interpolate(this.current,t);return function(t){return a.current=o(t),"translate("+r.centroid(a.current)+") "+("rotate("+(a.current.rotate||0)+")")}}):t.attr("transform",function(t){return this.current=i(t,n.omit),"translate("+r.centroid(this.current)+")"})}function s(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=this,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments[2],i=function(e,r){return function(n){if(!arguments.length)return a[e];var o=a[e];return a[e]=n,r&&r(n,o),t}},l=function(t){return function(){return a[t]}},c=function(e,r){return function(o){if(!arguments.length)return a[e];var i=a[e];return a[e]=n(o),r&&r(a[e],i),t}},d=function(e,r){return function(o){if(!arguments.length)return a[e];var i=a[e];return o&&o.domain?a[e]=function(){return o}:a[e]=n(o),r&&r(a[e],i),t}},u={base:function(){return t},values:function(){return a},removeProp:function(e){return o.indexOf(e)!==-1?u:(a[e]=null,t[e]=null,u)},addProp:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i(e),o=arguments[3];return a[e]||t[e]?u:(n=n||i(e,o),n(r),t[e]=n,u)},addPropGet:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l(e);return a[e]||t[e]?u:(a[e]=r,t[e]=n,u)},addMethod:function(e,r){return t[e]?u:(t[e]=r,u)},addPropFunctor:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c(e),o=arguments[3];return a[e]||t[e]?u:(n=n||c(e,o),n(r),t[e]=n,u)},addScaleFunctor:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:d(t),n=arguments[3];return u.addProp(t,e,r,n)},addDispatcher:function(n){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"on",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"dispatch";return t[o]?u:a[i]?u:(t[o]=function(e,r){return 0===arguments.length?a[i]:1===arguments.length?a[i].on(e):(a[i].on(e,r),t)},a[i]=e.dispatch.apply(r,n),u)}};return u}function p(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:X(),r={},n=function t(e){return(e.selection?e.selection():e).on(c("mouseover"),o).on(c("mouseout"),l).on(c("mousemove"),i),t},a=function(t,n){var a=this.getBoundingClientRect(),o={},i=(r.at.call(this,t,n)||(e.event.clientX>window.innerWidth/2?"center left":"center right")).split(" ");switch(i={x:i[1],y:i[0]},i.x){case"left":o.x=a.left;break;case"center":o.x=a.left+a.width/2;break;default:o.x=a.left+a.width}switch(i.y){case"bottom":o.y=a.top+a.height;break;case"center":o.y=a.top+a.height/2;break;default:o.y=a.top}return o},o=function(t,e){var n=r.selection.selectAll(".d2b-tooltip").data(function(t){return[t]}),a=n.enter().append("div").style("opacity",0).attr("class","d2b-tooltip");a.append("div").attr("class","d2b-tooltip-content"),n=n.merge(a),n.transition().duration(100).style("opacity",1),r.dispatch.call("insert",n,this,t,e)},i=function(t,n){var o=r.html.call(this,t,n),i=r.target.call(this,t,n),l=r.color.call(this,t,n),c=i?i.node():this,d=r.followMouse.call(this,t,n)?{x:e.event.clientX,y:e.event.clientY}:a.call(c,t,n),u=r.selection.selectAll(".d2b-tooltip").data(function(t){return[t]}),s=r.my.call(this,t,n)||(e.event.clientX>window.innerWidth/2?"left":"right");u.attr("class","d2b-tooltip d2b-tooltip-"+s).style("top",d.y+"px").style("left",d.x+"px").style("border-color",l).select(".d2b-tooltip-content").html(o),r.dispatch.call("move",u,this,t,n)},l=function(t,e){var n=r.selection.selectAll(".d2b-tooltip").data(function(t){return[t]});n.transition().duration(100).style("opacity",0).remove(),r.dispatch.call("remove",n,this,t,e)},c=function(t){return t+".d2b-tooltip"},d=function(e,a){a&&a.select(".d2b-tooltip-area-"+t).remove(),e&&(r.selection=e.selectAll(".d2b-tooltip-area-"+t).data([n]),r.selection=r.selection.merge(r.selection.enter().append("div").attr("class","d2b-tooltip-area-"+t+" d2b-tooltip-area")))};return s(n,r).addProp("container",e.select("body"),null,d).addMethod("clear",function(t){return(t.selection?t.selection():t).on(c("mouseover"),null).on(c("mouseout"),null).on(c("mousemove"),null),n}).addPropFunctor("followMouse",!1).addPropFunctor("color",null).addPropFunctor("my",null).addPropFunctor("at",null).addPropFunctor("target",null).addPropFunctor("html",null).addDispatcher(["insert","move","remove"]),n}function b(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];var n=e[0];return e.forEach(function(t){null!==n&&void 0!==n&&n!==!1||(n=t)}),n}function h(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:X(),r={},n={},a=function(t,e,n){if("y"===n){if(e.y===1/0)return t.style("opacity",0);t.style("opacity",1).attr("transform","translate(0, "+e.y+")").attr("y1",0).attr("y2",0).attr("x1",0).attr("x2",r.size.width)}else{if(e.x===1/0)return t.style("opacity",0);t.style("opacity",1).attr("transform","translate("+e.x+", 0)").attr("x1",0).attr("x2",0).attr("y1",0).attr("y2",r.size.height)}},o=function(t,n,a){var o=t.node();if(o){var i=t.node().getBoundingClientRect(),l=a.x,c=a.y,d=10;r.trackY?c+=n.y>r.size.height/2?n.y-d-i.height:n.y+d:c=e.event.clientY-a.y>r.size.height/2?e.event.clientY-d-i.height:e.event.clientY+d,r.trackX?l+=n.x>r.size.width/2?n.x-d-i.width:n.x+d:l=e.event.clientX-a.x>r.size.width/2?e.event.clientX-d-i.width:e.event.clientX+d,l+=window.pageXOffset,c+=window.pageYOffset,t.style("left",l+"px").style("top",c+"px")}},i=function(t,e){var n=r.title(e.points.map(function(t){return t.data}));t.select(".d2b-tooltip-title").style("display",n?"block":"none").html(n);var a=t.select(".d2b-tooltip-content"),o=a.selectAll(".d2b-tooltip-row").data(e.points),i=o.enter().append("div").attr("class","d2b-tooltip-row");o.exit().remove(),o=o.merge(i).html(function(t){return t.row}).style("border-left-color",function(t){return t.color||"transparent"})},l=function(t){var n={x:e.event.clientX-t.x,y:e.event.clientY-t.y},a=1/0,o=1/0,i=[];for(var l in x)if(x.hasOwnProperty(l)){var c=x[l],d=function(t){if(!c.hasOwnProperty(t))return"continue";var e=c[t],l=[];e.config.data.forEach(function(t,c){var d={data:t,x:b(e.config.x(t,c),r.x(t,c)),y:b(e.config.y(t,c),r.y(t,c)),color:b(e.config.color(t,c),r.color(t,c)),row:b(e.config.row(t,c),r.row(t,c))};if(r.trackX&&r.trackY){if(d.x===a&&d.y===o)return l.push(d);var u=Math.sqrt(Math.pow(a-n.x,2)+Math.pow(o-n.y,2)),s=Math.sqrt(Math.pow(d.x-n.x,2)+Math.pow(d.y-n.y,2));s<u&&s<r.threshold&&(a=d.x,o=d.y,i=[],l=[d])}else if(r.trackX){if(d.x===a)return l.push(d);var p=Math.abs(a-n.x),h=Math.abs(d.x-n.x);h<p&&h<r.threshold&&(a=d.x,i=[],l=[d])}else if(r.trackY){if(d.y===o)return l.push(d);var f=Math.abs(o-n.y),g=Math.abs(d.y-n.y);g<f&&g<r.threshold&&(o=d.y,i=[],l=[d])}}),i=i.concat(l)};for(var u in c){d(u)}}return i=i.sort(function(t,r){return e.ascending(t.x,r.x)||e.ascending(t.y,r.y)}),{x:a,y:o,points:i}},c=function(t){t.transition().duration(50).style("opacity",0).remove()},d=function(t){t.transition().duration(50).style("opacity",1)},u=function(){var t=r.selectionSvg.selectAll(".d2b-tooltip-marker-x").data(r.trackX?[n]:[]),e=t.enter().append("line").attr("class","d2b-tooltip-marker-x d2b-tooltip-marker"),a=r.selectionSvg.selectAll(".d2b-tooltip-marker-y").data(r.trackY?[n]:[]),o=a.enter().append("line").attr("class","d2b-tooltip-marker-y d2b-tooltip-marker"),i=r.selection.selectAll(".d2b-tooltip").data([n]),l=i.enter().append("div").attr("class","d2b-tooltip");l.merge(i).call(d),a.merge(o).call(d),t.merge(e).call(d),l.append("div").attr("class","d2b-tooltip-title"),l.append("div").attr("class","d2b-tooltip-content")},p=function(){r.selectionSvg.selectAll(".d2b-tooltip-marker-x").data([]).exit().call(c),r.selectionSvg.selectAll(".d2b-tooltip-marker-y").data([]).exit().call(c),r.selection.selectAll(".d2b-tooltip").data([]).exit().call(c)},h=function(t,e){var n=r.selectionSvg.selectAll(".d2b-tooltip-base").data([t]);n=n.merge(n.enter().append("rect").attr("class","d2b-tooltip-base"));var c=n.node().getBoundingClientRect();c={x:c.left,y:c.top};var d=l(c);return d.points.length?(u(),r.selectionSvg.select(".d2b-tooltip-marker-x").call(a,d,"x"),r.selectionSvg.select(".d2b-tooltip-marker-y").call(a,d,"y"),r.selection.select(".d2b-tooltip").call(i,d).call(o,d,c),void r.dispatch.call("move",r.tooltip,this,t,e)):p()},f=function(){p()},g=function(t){return t+".d2b-tooltip-axis"},v=function(e,a){a&&a.select("div.d2b-tooltip-axis-area-"+t).remove(),e&&(r.selection=e.selectAll("div.d2b-tooltip-axis-area-"+t).data([n]),r.selection=r.selection.merge(r.selection.enter().append("div").attr("class","d2b-tooltip-axis-area-"+t+" d2b-tooltip-axis-area")))},m=function(e,a){a&&a.select("g.d2b-tooltip-axis-area-"+t).remove(),e&&(r.selectionSvg=e.selectAll("g.d2b-tooltip-axis-area-"+t).data([n]),r.selectionSvg=r.selectionSvg.merge(r.selectionSvg.enter().append("g").attr("class","d2b-tooltip-axis-area-"+t+" d2b-tooltip-axis-area")))},y=function(t,e){e&&e.on(g("mouseout"),null).on(g("mousemove"),null),t&&t.on(g("mouseout"),f).on(g("mousemove"),h)};s(n,r).addProp("htmlContainer",e.select("body"),null,v).addProp("svgContainer",null,null,m).addProp("tracker",e.select("body"),null,y).addProp("size",{height:0,width:0}).addProp("trackX",!0).addProp("trackY",!1).addProp("threshold",1/0).addMethod("clear",function(t,e){return 0===arguments.length?x={}:1===arguments.length?delete x[t]:arguments.length>=2&&delete x[t][e],n}).addPropFunctor("title",null).addPropFunctor("x",function(t){return t.x}).addPropFunctor("y",function(t){return t.y}).addPropFunctor("color",null).addPropFunctor("row",null).addDispatcher(["move"]);var x={};return n.graph=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=x[t]=x[t]||{},n=r[e];if(!n){n=r[e]={interface:{},config:{}};var a=s(n.interface,n.config);a.addProp("data",[]).addMethod("clear",function(){return n.config.data=[],n.interface}).addMethod("addPoint",function(t){return n.config.data.push(t),n.interface}).addPropFunctor("x",null).addPropFunctor("y",null).addPropFunctor("color",null).addPropFunctor("row",null)}return n.interface},n}function f(){var t={},r=function(r){var n=this,a=r;r=r.map(t.values);var o=[],i=r.map(function(e){var r={};return e.forEach(function(e,a){var i=t.x.call(n,e,a);o.push(i),r[i]=t.y.call(n,e,a)}),r});o=e.set(o).values();var l=o.reduce(function(t,e,r){return t[e]=r,t},{}),c=e.range(0,r.length),d=o.map(function(t){return i.map(function(e){return e[t]||0})});t.stack.keys(c).value(function(t,e){return t[e]||0});var u=t.stack(d);return r.forEach(function(e,r){e.forEach(function(e,a){var o=t.x.call(n,e,a),i=u[r][l[o]];t.out.call(n,e,i[0],i[1],o)})}),a};return s(r,t).addProp("stack",e.stack()).addPropFunctor("values",function(t){return t}).addPropFunctor("x",function(t){return t.x}).addPropFunctor("y",function(t){return t.y}).addPropFunctor("out",function(t,e,r){t.y0=e,t.y1=r}),r}function g(){var t={},e=function(e){var r=e.selection?e.selection():e,n=r.selectAll(".d2b-breadcrumbs").data(function(t){return[t]}),a=n.enter().append("div").attr("class","d2b-breadcrumbs");n=n.merge(a).classed("d2b-vertical",t.vertical);var o=n.selectAll(".d2b-breadcrumb").data(t.values,t.key),i=o.exit(),l=o.enter().append("div").attr("class","d2b-breadcrumb").style("opacity",0);l.append("div").attr("class","d2b-breadcrumb-icon"),l.append("div").attr("class","d2b-breadcrumb-content"),o=o.merge(l).order(),o.select(".d2b-breadcrumb-content").html(t.html),e!==r&&(o=o.transition(e),i=i.transition(e).style("opacity",0)),o.style("border-color",t.color).style("opacity",1).select(".d2b-breadcrumb-icon").style("background-color",t.color),i.remove()};return s(e,t).addPropFunctor("values",function(t){return t}).addPropFunctor("key",function(t,e){return e}).addPropFunctor("color","blue").addPropFunctor("html",function(t){return t.html}).addPropFunctor("vertical",!0),e}function v(){var t={},r=e.symbol().size(80),n=function n(a){var o=a.selection?a.selection():a,i=o.selectAll(".d2b-legend").data(function(t){return[t]}),l=i.enter().append("div").attr("class","d2b-legend");i=i.merge(l).classed("d2b-vertical",t.vertical);var c=i.selectAll(".d2b-legend-item").data(t.values,t.key),d=c.exit(),u=c.enter().append("div").attr("class","d2b-legend-item").style("opacity",0);u.append("div").attr("class","d2b-legend-icon"),u.append("div").attr("class","d2b-legend-content"),c=c.merge(u).order(),c.select(".d2b-legend-content").html(t.html),a!==o&&(c=c.transition(a),d=d.transition(a).style("opacity",0)),c.style("opacity",1).each(function(n,a){var o=e.select(this),i=t.color(n,a),l=t.empty(n,a);o.style("border-color",i);var c=t.icon(n,a),d=o.select(".d2b-legend-icon"),u=[],s=[],p=d.node().getBoundingClientRect(),b={width:p.width,height:p.height},h={x:b.width/2,y:b.height/2};"string"==typeof c?u.push(c):s.push(c);var f=d.selectAll(".d2b-legend-svg-icon").data(function(t){return[t]}),g=f.enter().append("svg");g.attr("class","d2b-legend-svg-icon").attr("width",b.width).attr("height",b.height),f=f.merge(g);var v=f.selectAll("text").data(u);v.exit().remove(),v=v.merge(v.enter().append("text")),v.text(function(t){return t}).style("stroke",i).style("fill",l?"white":i).attr("transform","translate("+h.x+","+h.y+")");var m=f.selectAll("path").data(s);m.exit().remove(),m=m.merge(m.enter().append("path")),m.style("stroke",i).style("fill",l?"white":i).attr("d",function(t){return r.type(t)()}).attr("transform","translate("+h.x+","+h.y+")")}),i.each(function(r,a){var i=t.allowEmptied(r,a),l=e.select(this).selectAll(".d2b-legend-item"),c=function(e){l.each(function(r,n){t.setEmpty(r,n,e)})},d=function e(){var e=!0;return l.each(function(r,n){t.empty(r,n)||(e=!1)}),e},u=function(r,a){t.setEmpty(r,a,!t.empty(r,a)),!i&&d()&&c(!1),o.call(n),e.select(this.parentNode).dispatch("change",{bubbles:!0})},s=function(r,a){c(!0),t.setEmpty(r,a,!1),o.call(n),e.select(this.parentNode).dispatch("change",{bubbles:!0})};l.each(function(r,n){var a=t.clickable(r,n),o=t.dblclickable(r,n);e.select(this).on("click",a?u:null).on("dblclick",o?s:null)})}),d.remove()};return s(n,t).addPropFunctor("values",function(t){return t}).addPropFunctor("key",function(t,e){return e}).addPropFunctor("color",function(t){return N(t.html)}).addPropFunctor("html",function(t){return t.html}).addPropFunctor("icon","").addPropFunctor("vertical",!1).addPropFunctor("allowEmptied",!1).addPropFunctor("clickable",!1).addPropFunctor("dblclickable",!1).addPropFunctor("empty",function(t){return t.empty}).addPropFunctor("setEmpty",function(t,e,r){return t.empty=r}),n}function m(){function t(t){var e={top:0,left:0,right:0,bottom:0};return"number"==typeof t?{top:t,left:t,right:t,bottom:t}:(["top","bottm","right","left"].forEach(function(r){t[r]&&e[r]==t[r]}),e)}function r(t,e){return{width:t&&t.width>0?t.width:e.width,height:t&&t.height>0?t.height:e.height}}function n(t,e,r){r(t),r(e)}function a(t,e,r,a,o,i){var l=t.node();if(l){r.style("top","").style("left","").style("right","").style("bottom","").style("width","").style("height","");var c=void 0;"right"===a||"left"===a?(t.classed("d2b-vertical",!0),c=l.getBoundingClientRect(),n(e,r,function(t){t.style(a,o[a]+"px").style("top",o.top+"px").style("height",i.height+"px")}),o[a]+=c.width,i.width-=c.width):"top"===a||"bottom"===a?(t.classed("d2b-vertical",!1),c=l.getBoundingClientRect(),n(e,r,function(t){t.style(a,o[a]+"px").style("left",o.left+"px").style("width",i.width+"px")}),o[a]+=c.height,i.height-=c.height):t.classed("d2b-vertical",!1)}}var o={},i=function i(l){var c=l.selection?l.selection():l,d=c.selectAll(".d2b-chart-frame").data(function(t){return[t]}),u=d.enter().append("div").attr("class","d2b-chart-frame");return d=d.merge(u),c.each(function(i){var d=e.select(this).select(".d2b-chart-frame"),u=d,s=t(o.padding(i)),p=t(o.chartPadding(i)),b=r(o.size(i),this.getBoundingClientRect());n(d,u,function(t){t.style("width",b.width+"px").style("height",b.height+"px")}),b.width-=s.left+s.right,b.height-=s.top+s.bottom;var h=o.legendEnabled(i)?[i]:[],f=d.selectAll(".d2b-legend-frame").data(h),g=f.enter().append("div").attr("class","d2b-legend-frame"),v=f.exit();v.remove(),g.append("div").attr("class","d2b-legend-container"),f=f.merge(g);var m=f,y=o.breadcrumbsEnabled(i)?[i]:[],x=d.selectAll(".d2b-breadcrumbs-frame").data(y),P=x.enter().append("div").attr("class","d2b-breadcrumbs-frame"),k=x.exit();k.remove(),P.append("div").attr("class","d2b-breadcrumbs-container"),x=x.merge(P);var w=x,F=d.selectAll(".d2b-chart").data(function(t){return[t]}),_=F.enter().append("svg").attr("class","d2b-chart");_.append("g").attr("class","d2b-chart-container"),F=F.merge(_);var A=F;l!==c&&(u=u.transition(l),m=m.transition(l),w=w.transition(l),A=A.transition(l)),a(x,P,w,o.breadcrumbsOrient(i),s,b),a(f,g,m,o.legendOrient(i),s,b),n(_,A,function(t){t.style("left",s.left+"px").style("top",s.top+"px").style("width",b.width+"px").style("height",b.height+"px"),t.select(".d2b-chart-container").attr("transform","translate("+[p.left,p.top]+")")}),b.width-=p.left+p.right,b.height-=p.top+p.bottom,F.select(".d2b-chart-container").node().__size__=b}),i};return s(i,o).addPropFunctor("size",null).addPropFunctor("legendEnabled",!0).addPropFunctor("legendOrient","bottom").addPropFunctor("breadcrumbsEnabled",!1).addPropFunctor("breadcrumbsOrient","right").addPropFunctor("chartPadding",10).addPropFunctor("padding",10),i}function y(t,e,r){var a=0,o=0;if(r=n(r||1),e=n(e||function(t){return t}),t.filter(function(t){return!isNaN(U(r(t)))&&!isNaN(U(e(t)))}).forEach(function(t){var n=r(t),i=e(t);a+=n,o+=i*n}),t.length&&a)return o/a}function x(t,r,a){a=n(a||1),r=n(r||function(t){return t});var o,i=[],l=t.filter(function(t){return 0!==a(t)&&!isNaN(U(a(t)))&&!isNaN(U(r(t)))}).sort(function(t,n){return e.ascending(r(t),r(n))});o=Math.round(e.sum(l,function(t){return a(t)})/2*1e12)/1e12;var c=0,d=!1;if(l.forEach(function(t){d&&(i.push(r(t)),d=!1),c+=a(t),c===o&&(i.push(r(t)),d=!0),c>o&&0===i.length&&i.push(r(t))}),t.length)return y(i)}function P(t,e,r){r=n(r||1),e=n(e||function(t){return t});var a=[],o=0,i={};if(t.forEach(function(t){var n=U(e(t));isNaN(e(t))||(i[n]=i[n]||0,i[n]+=r(t),i[n]>o?(o=i[e(t)],a=[e(t)]):i[e(t)]==o&&a.push(e(t)))}),t.length)return y(a)}function k(t,r){r=n(r||function(t){return t});var a=e.extent(t,r);if(t.length)return a[1]-a[0]}function w(t,r){if(r=n(r||function(t){return t}),t.length)return e.mean(e.extent(t,r))}function F(t){return t*(180/Math.PI)}function _(t){return t*(Math.PI/180)}function A(){function t(t,e){return l.empty.call(this,t,e)?0:1}function r(t,e){var r=l.size.call(this,t,e),n=l.empty.call(this,t,e);return d.size(n?r:2.5*r).call(this,t,e)}function n(t,e){var r=l.size.call(this,t,e),n=l.empty.call(this,t,e);return d.size(n?r/3:r).call(this,t,e)}function a(t,e){var r=l.size.call(this,t,e);return d.size(r).call(this,t,e)}function o(t,a){var o=l.empty.call(this,t,a);e.select(this).select("path.d2b-point-back").transition().duration(100).attr("d",r),e.select(this).select("path.d2b-point-front").transition().duration(100).style("opacity",o?.5:1).attr("d",n)}function i(t,r){var o=l.empty.call(this,t,r);e.select(this).select("path.d2b-point-back").transition().duration(100).attr("d",a),e.select(this).select("path.d2b-point-front").transition().duration(100).style("opacity",o?0:1).attr("d",n)}var l={},c=function r(c){var d=c.selection?c.selection():c,u=d.selectAll("path.d2b-point-back").data(function(t){return[t]});u.enter().append("path").attr("class","d2b-point-back").attr("d",a).style("fill-opacity",0).style("stroke",l.stroke).style("stroke-width",l.strokeWidth),c!==d&&(u=u.transition(c)),u.attr("d",a).style("stroke",l.stroke).style("stroke-width",l.strokeWidth);var s=d.selectAll("path.d2b-point-front").data(function(t){return[t]});return s.enter().append("path").attr("class","d2b-point-front").attr("d",n).style("opacity",t).style("fill",l.fill).style("stroke",l.stroke).style("stroke-width",l.strokeWidth),c!==d&&(s=s.transition(c)),s.attr("d",n).style("opacity",t).style("fill",l.fill).style("stroke",l.stroke).style("stroke-width",l.strokeWidth),d.each(function(t,r){var n=l.active.call(this,t,r);e.select(this).on("mouseover.d2b-point",n?o:null).on("mouseout.d2b-point",n?i:null)}),r},d=e.symbol();return s(c,l).addPropFunctor("size",150,null,function(t){return d.size(t)}).addPropFunctor("type",e.symbolCircle,null,function(t){return d.type(t)}).addPropFunctor("active",!1).addPropFunctor("empty",!1).addPropFunctor("fill","steelblue").addPropFunctor("stroke",function(t,r){return e.rgb(l.fill.call(this,t,r)).darker(.3)}).addPropFunctor("strokeWidth","1px"),c}function z(){function t(t,e){t.selectAll(".d2b-legend-item").on("click",function(n,a){r.call(this,n,a,t,e)}).on("dblclick",function(r,a){n.call(this,r,a,t,e)})}function r(t,r,n,a){var o=i.clickable.call(this,t,r),l=i.allowEmptied.call(n.node(),n.datum(),a);if(o){i.setEmpty(t,r,!i.empty(t,r));var d=e.select(this),u=n.selectAll(".d2b-legend-item"),s=!0;u.each(function(t,e){return s=!!i.empty(t,e)&&s}),s&&!l?(u.each(function(t,e){return i.setEmpty(t,e,!1)}).transition().duration(100).call(c),u.filter(function(e){return e!=t}).dispatch("change")):d.transition().duration(100).call(c),d.dispatch("change",{bubbles:!0})}}function n(t,r,n){var a=i.dblclickable.call(this,t,r);if(a){var o=n.selectAll(".d2b-legend-item");o.each(function(t,e){return i.setEmpty(t,e,!0)}),i.setEmpty(t,r,!1),o.transition().duration(100).call(c),o.filter(function(e){return e!=t}).dispatch("change"),e.select(this).dispatch("change",{bubbles:!0})}}function o(t,e,r,n){var a=0,o=0;switch(n[1]){case"center":case"middle":o=r.height/2-e.height/2;break;case"bottom":o=r.height-e.height;break;case"top":default:o=0}switch(n[2]){case"center":case"middle":a=r.width/2-e.width/2;break;case"right":a=r.width-e.width;break;case"left":default:a=0}e.left=a,e.right=r.width-a+e.width,e.top=o,e.bottom=r.height-o+e.height,t.attr("transform","translate("+a+", "+o+")")}var i={},l=function r(n){return n.each(function(r,l){var u=e.select(this),s=i.itemSize.call(this,r,l),p=i.size.call(this,r,l),b=i.orient.call(this,r,l).split(" "),h=b[0],f=i.maxTextLength.call(this,r,l),g=i.items.call(this,r,l);c.size(1.5*Math.pow(s/2,2)).strokeWidth(.1*s);var v=u.selectAll(".d2b-legend").data([g]),m=v.enter().append("g").attr("class","d2b-legend");v=v.merge(m);var y=v.selectAll(".d2b-legend-item").data(function(t){return t.sort(i.order)},i.key),x=y.enter().append("g").attr("class","d2b-legend-item").style("opacity",0);x.append("g").append("text");var P=y.exit();y=y.merge(x).style("cursor",function(t,e){var r=i.clickable.call(this,t,e),n=i.dblclickable.call(this,t,e);return r||n?"pointer":"auto"}),u.call(t,l);var k=y.select("g").attr("transform","translate("+s/2+", "+s/2+")"),w=y.select("text").attr("transform","translate("+s/1.5+", "+s/3+")").style("font-size",s+"px").call(a,i.label,f);n.selection&&(P=P.transition(n).style("opacity",0),y=y.transition(n),k=k.transition(n),w=w.transition(n),v=v.transition(n)),P.remove(),k.call(c);var F=0;w.each(function(){F=Math.max(F,this.getBBox().width)}),F+=s;var _={x:s,y:5};x.call(d[h],{},_,s,p,F),this.__box__={width:0,height:0,top:0,left:0,right:0,bottom:0},y.style("opacity",1).call(d[h],this.__box__,_,s,p,F),m.call(o,this.__box__,p,b),v.call(o,this.__box__,p,b)}),r},c=A(),d={horizontal:function(t,r,n,a,o,i){var l=0,c=0,d=0;t.attr("transform",function(){var t=e.select(this),u=a*t.selectAll("tspan").size(),s=t.select("text").node().getBBox().width;l+i>o.width&&(l=0,c+=d+n.y,d=0);var p="translate("+l+", "+c+")";return d=Math.max(d,u),r.width=Math.max(r.width,l+s+1.5*a),l+=i+n.x,p}),r.height=c+d},vertical:function(t,r,n,a,o){var i=0,l=0,c=0;t.attr("transform",function(){var t=e.select(this),d=a*t.selectAll("tspan").size(),u=t.select("text").node().getBBox().width;l+d>o.height&&(i+=c+n.x+a,l=0,c=0);var s="translate("+i+", "+l+")";return c=Math.max(c,u),r.height=Math.max(r.height,l+d),l+=d+n.y,s}),r.width=i+c+1.5*a}};return s(l,i).addPropFunctor("items",function(t){return t}).addPropFunctor("itemSize",12).addPropFunctor("size",{width:960,height:500}).addPropFunctor("orient","vertical center right").addPropFunctor("maxTextLength",1/0).addPropFunctor("allowEmptied",!1).addPropFunctor("order",function(t,r){return e.ascending(i.label(t),i.label(r))}).addPropFunctor("key",function(t,e){return e}).addPropFunctor("clickable",!1).addPropFunctor("dblclickable",!1).addPropFunctor("label",function(t){return t.label}).addPropFunctor("empty",function(t){return t.empty},null,function(t){return c.empty(t)}).addPropFunctor("setEmpty",function(t,e,r){t.empty=r}).addPropFunctor("active",!1,null,function(t){return c.active(t)}).addPropFunctor("symbol",e.symbolCircle,null,function(t){return c.type(t)}).addPropFunctor("color",function(t){return N(t.label)},null,function(t){return c.fill(t)}).addMethod("box",function(t){var e=t.node?t.node():t;return e?e.__box__:null}),l}function M(){function t(t,e,a){var o=r(t,e,a),i=n(t,e,a);return o?{startAngle:o.endAngle,endAngle:o.endAngle}:i?{startAngle:i.startAngle,endAngle:i.startAngle}:{startAngle:0,endAngle:0}}function r(t,e,r){for(var n=e.length;--t>=0;)for(var o=a.key(r[t].data,t),i=0;i<n;++i)if(a.key(e[i].data,i)===o)return e[i]}function n(t,e,r){for(var n=r.length,o=e.length;++t<n;)for(var i=a.key(r[t].data,t),l=0;l<o;++l)if(a.key(e[l].data,l)===i)return e[l]}var a={},o=function r(n){var o=n.selection?n.selection():n;return o.each(function(){var r=e.select(this),i=r.selectAll(".d2b-pie-arc"),c=i.data();i=i.data(a.values,function(t,e){return a.key(t.data,e)});var d=i.enter().append("g").attr("class","d2b-pie-arc"),u=i.exit(),s=i.merge(d).order();d.append("path").attr("fill",function(t,e){return a.color.call(this,t.data,e)});var p=s.data();d.select("path").each(function(e,r){this.current=t(r,c,p)}),u.datum(function(e,r){var n=t(r,p,c);return n.data=e.data,n.innerRadius=e.innerRadius,n.outerRadius=e.outerRadius,n}),n!==o&&(u=u.transition(n),s=s.transition(n)),s.select("path").call(l,a.arc).attr("fill",function(t,e){return a.color.call(this,t.data,e)}),u.remove().select("path").call(l,a.arc)}),r};return s(o,a).addProp("arc",e.arc()).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t}).addPropFunctor("color",function(t){return N(t.label)}),o}function E(){function t(t,e){var n=r.graphs(t,e).map(function(t,e){var n={data:t,index:e,align:r.align(t,e),tooltipGraph:r.tooltipGraph(t,e),shift:r.shift(t,e),stackBy:r.stackBy(t,e),key:r.key(t,e),color:r.color(t,e)};return n.values=r.values(t,e).map(function(t,e){var a={data:t,index:e,graph:n,x:r.px(t,e),y:r.py(t,e)};return a.y1=a.y,a.y0=0,a}),n});return i.entries(n).forEach(function(t){t.values.length>1&&o(t.values)}),n}var r={},n=function e(n){var o=n.selection?n.selection():n,i=o.selectAll(".d2b-line-graphs").data(function(t){return[t]});i=i.merge(i.enter().append("g").attr("class","d2b-line-graphs"));var l=i.selectAll(".d2b-line-graph").data(function(e,r){return t(e,r)},function(t){return t.key}),c=l.enter().append("g").attr("class","d2b-line-graph d2b-graph").style("opacity",0);c.append("path").attr("class","d2b-line").style("stroke",function(t){return t.color}).attr("d",function(t){var e=this.parentNode.parentNode,n=e.__d2bPreserveScaleX__,o=e.__d2bPreserveScaleY__;return a(t,n||r.x,o||r.y)});var d=l.merge(c).order(),u=l.exit(),s=d.select(".d2b-line");return n!==o&&(d=d.transition(n),u=u.transition(n),s=s.transition(n),u.style("opacity",0).select(".d2b-line").attr("d",function(t){return a(t,r.x,r.y)})),d.style("opacity",1),u.remove(),s.style("stroke",function(t){return t.color}).attr("d",function(t){return a(t,r.x,r.y,!0)}),i.each(function(){this.__d2bPreserveScaleX__=r.x.copy(),this.__d2bPreserveScaleY__=r.y.copy()}),e},a=function(t,e,n){var a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=t.shift;return null===o&&(o=e.bandwidth?e.bandwidth()/2:0),t.tooltipGraph&&a&&t.tooltipGraph.data(t.values).x(function(t){return e(t.x)+o}).y(function(e){return n(e[t.align])}).color(t.color),r.line.x(function(t){return e(t.x)+o}).y(function(e){return n(e[t.align])}),r.line(t.values)},o=f().values(function(t){return t.values}).y(function(t){return t.y}).x(function(t){return t.x}),i=e.nest().key(function(t){var e=t.stackBy;return e!==!1&&null!==e?e:X()});return s(n,r).addProp("line",e.line()).addProp("stack",o.stack(),null,function(t){return o.stack(t)}).addProp("x",e.scaleLinear()).addProp("y",e.scaleLinear()).addPropGet("type","line").addPropFunctor("graphs",function(t){return t}).addPropFunctor("align","y1").addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("shift",null).addPropFunctor("stackBy",null).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values}).addPropFunctor("color",function(t){return N(t.label)}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addMethod("getComputedGraphs",function(e){return(e.selection?e.selection():e).data().map(function(e,r){
return t(e,r)})}).addMethod("getVisiblePoints",function(t){var e=n.getComputedGraphs(t);return e.map(function(t){return[].concat.apply([],t.map(function(t){return t.values.map(function(e){return{x:e.x,y:e[t.align],graph:t}})}))})}),n}function B(){function t(t,e){var n=r.graphs(t,e).map(function(t,e){var n={data:t,index:e,tooltipGraph:r.tooltipGraph(t,e),shift:r.shift(t,e),stackBy:r.stackBy(t,e),key:r.key(t,e),color:r.color(t,e)};return n.values=r.values(t,e).map(function(t,e){var a={data:t,index:e,graph:n,x:r.px(t,e),y:r.py(t,e)};return a.y1=a.y,a.y0=0,a}),n});return i.entries(n).forEach(function(t){t.values.length>1&&o(t.values)}),n}var r={},n=function e(n){var o=n.selection?n.selection():n,i=o.selectAll(".d2b-area-graphs").data(function(t){return[t]});i=i.merge(i.enter().append("g").attr("class","d2b-area-graphs"));var l=i.selectAll(".d2b-area-graph").data(function(e,r){return t(e,r)},function(t){return t.key}),c=l.enter().append("g").attr("class","d2b-area-graph d2b-graph").style("opacity",0);c.append("path").attr("class","d2b-area").style("fill",function(t){return t.color}).attr("d",function(t){var e=this.parentNode.parentNode,n=e.__d2bPreserveScaleX__,o=e.__d2bPreserveScaleY__;return a(t,n||r.x,o||r.y)});var d=l.merge(c).order(),u=l.exit(),s=d.select(".d2b-area");return n!==o&&(d=d.transition(n),u=u.transition(n),s=s.transition(n),u.style("opacity",0).select(".d2b-area").attr("d",function(t){return a(t,r.x,r.y)})),d.style("opacity",1),u.remove(),s.style("fill",function(t){return t.color}).attr("d",function(t){return a(t,r.x,r.y,!0)}),i.each(function(){this.__d2bPreserveScaleX__=r.x.copy(),this.__d2bPreserveScaleY__=r.y.copy()}),e},a=function(t,e,n){var a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=t.shift;return null===o&&(o=e.bandwidth?e.bandwidth()/2:0),t.tooltipGraph&&a&&t.tooltipGraph.data(t.values).x(function(t){return e(t.x)+o}).y(function(t){return n(t.y1)}).color(t.color),r.area.x(function(t){return e(t.x)+o}).y0(function(t){return n(t.y0)}).y1(function(t){return n(t.y1)}),r.area(t.values)},o=f().values(function(t){return t.values}).y(function(t){return t.y}).x(function(t){return t.x}),i=e.nest().key(function(t){var e=t.stackBy;return e!==!1&&null!==e?e:X()});return s(n,r).addProp("area",e.area()).addProp("stack",o.stack(),null,function(t){return o.stack(t)}).addProp("x",e.scaleLinear()).addProp("y",e.scaleLinear()).addPropGet("type","area").addPropFunctor("graphs",function(t){return t}).addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("shift",null).addPropFunctor("stackBy",null).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values}).addPropFunctor("color",function(t){return N(t.label)}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addMethod("getComputedGraphs",function(e){return(e.selection?e.selection():e).data().map(function(e,r){return t(e,r)})}).addMethod("getVisiblePoints",function(t){var e=n.getComputedGraphs(t);return e.map(function(t){var e=[].concat.apply([],t.map(function(t){return t.values.map(function(e){return{x:e.x,y:e.y0,graph:t}})})),r=[].concat.apply([],t.map(function(t){return t.values.map(function(e){return{x:e.x,y:e.y1,graph:t}})}));return e.concat(r)})}),n}function G(){function t(t,e){var r=n.graphs(t,e).map(function(t,e){var r={data:t,index:e,align:n.align(t,e),tooltipGraph:n.tooltipGraph(t,e),shift:n.shift(t,e),stackBy:n.stackBy(t,e),key:n.key(t,e),color:n.color(t,e),symbol:n.symbol(t,e)};return r.values=n.values(t,e).map(function(t,e){var a={data:t,index:e,graph:r,x:n.px(t,e),y:n.py(t,e),color:n.pcolor(t,e),symbol:n.psymbol(t,e),key:n.pkey(t,e),size:n.psize(t,e)};return a.y1=a.y,a.y0=0,a}),r});return i.entries(r).forEach(function(t){t.values.length>1&&o(t.values)}),r}function r(t,e,r,n,a){t.attr("transform",function(t){var o=t[a];return"translate("+(e(t.x)+n)+", "+r(o)+")"})}var n={},a=function a(o){var i=o.selection?o.selection():o,l=i.selectAll(".d2b-scatter-graphs").data(function(t){return[t]});l=l.merge(l.enter().append("g").attr("class","d2b-scatter-graphs"));var c=l.selectAll(".d2b-scatter-graph").data(function(e,r){return t(e,r)},function(t){return t.key}),d=c.enter().append("g").attr("class","d2b-scatter-graph d2b-graph").style("opacity",0),u=c.merge(d).order(),s=c.exit();return o!==i&&(u=u.transition(o),s=s.transition(o),s.style("opacity",0).each(function(t){var a=e.select(this),l=n.x,c=n.y,d=a.selectAll(".d2b-scatter-point");o!==i&&(d=d.transition(o));var u=t.shift;null===u&&(u=l.bandwidth?l.bandwidth()/2:0),d.style("opacity",0).call(r,l,c,u,t.align).remove()})),u.style("opacity",1),s.remove(),u.each(function(t){var a=e.select(this),l=n.x,c=n.y,d=this.parentNode,u=d.__d2bPreserveScaleX__||l,s=d.__d2bPreserveScaleY__||c,p=t.shift;null===p&&(p=l.bandwidth?l.bandwidth()/2:0);var b=t.shift;null===b&&(p=u.bandwidth?u.bandwidth()/2:0),t.tooltipGraph&&t.tooltipGraph.data(t.values).x(function(t){return l(t.x)+p}).y(function(t){return c(t.y)}).color(function(e){return e.color||t.color}),n.point.fill(function(e){return e.color||t.color}).type(function(e){return e.symbol||t.symbol}).size(function(t){return t.size});var h=a.selectAll(".d2b-scatter-point").data(t.values,function(t){return t.key}),f=h.enter().append("g").attr("class","d2b-scatter-point"),g=h.merge(f).order(),v=h.exit();o!==i&&(g=g.transition(o),v=v.transition(o)),f.style("opacity",0).call(r,u,s,b,t.align),g.style("opacity",1).call(n.point).call(r,l,c,p,t.align),v.style("opacity",0).call(r,l,c,p,t.align).remove()}),l.each(function(){this.__d2bPreserveScaleX__=n.x.copy(),this.__d2bPreserveScaleY__=n.y.copy()}),a},o=f().values(function(t){return t.values}).y(function(t){return t.y}).x(function(t){return t.x}),i=e.nest().key(function(t){var e=t.stackBy;return e!==!1&&null!==e?e:X()});return s(a,n).addProp("point",A().active(!0)).addProp("stack",o.stack(),null,function(t){return o.stack(t)}).addProp("x",e.scaleLinear()).addProp("y",e.scaleLinear()).addPropGet("type","scatter").addPropFunctor("graphs",function(t){return t}).addPropFunctor("align","y1").addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("shift",null).addPropFunctor("stackBy",null).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values}).addPropFunctor("color",function(t){return N(t.label)}).addPropFunctor("symbol",function(){return e.symbolCircle}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addPropFunctor("pcolor",null).addPropFunctor("psymbol",null).addPropFunctor("pkey",function(t,e){return e}).addPropFunctor("psize",25).addMethod("getComputedGraphs",function(e){return(e.selection?e.selection():e).data().map(function(e,r){return t(e,r)})}).addMethod("getVisiblePoints",function(t){var e=a.getComputedGraphs(t);return e.map(function(t){return[].concat.apply([],t.map(function(t){return t.values.map(function(e){return{x:e.x,y:e[t.align],graph:t}})}))})}),a}function R(){function t(t){return"horizontal"===t?{rotate:!0,px:"py",py:"px",x:"y",y:"x",w:"height",h:"width"}:{rotate:!1,px:"px",py:"py",x:"x",y:"y",w:"width",h:"height"}}function r(e,r){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t(d.orient(e,r)),o=d.graphs(e,r).map(function(t,e){var r={data:t,index:e,tooltipGraph:d.tooltipGraph(t,e),shift:d.shift(t,e),stackBy:d.stackBy(t,e),key:d.key(t,e),color:d.color(t,e)};return r.values=d.values(t,e).map(function(t,e){return{data:t,index:e,graph:r,key:d.pkey(t,e),x:d.px(t,e),y:d.py(t,e),centered:d.pcentered(t,e),color:d.pcolor(t,e)}}),r});return p.x(function(t){return t[a.x]}).y(function(t){return t[a.y]}),b.entries(o).forEach(function(t,e){return p.out(n(e))(t.values)}),c(o,d.baseline(e,r)),o}function n(t){var e={};return function(r,n,a,o){var i=e[o]=e[o]||[0,0];r.dy=a-n,r.stackIndex=t,r.base=o,r.dy>0?r.extent=[i[0],i[0]+=r.dy]:r.extent=[i[1],i[1]+=r.dy]}}function a(t,e,r){t.attr("transform",function(t){return"translate("+[e[r.x](t),e[r.y](t)]+")"})}function o(t,e,r,n){return function(a,o){var i=a.centered?o-e/4:o-e/2+a.stackIndex*r+n;return t(a.base)+i}}function i(t){var r=function(e){return[t(e.extent[0]),t(e.extent[1])]};return r.sorted=function(t){return r(t).slice().sort(e.ascending)},r}function l(t,r,n){var a=[],o=1/0;r.forEach(function(e){var r=e.values,i=t.range();o=Math.min(o,Math.abs(i[1]-i[0])),r.forEach(function(e){a.push(t(e[n.x]))})}),a.sort(e.ascending);for(var i=0;i<a.length-1;i++)a[i+1]!==a[i]&&(o=Math.min(a[i+1]-a[i],o));return o===1/0?0:o}function c(t,r){if(null===r){var n=[].concat.apply([],t.map(function(t){return t.values})),a=e.extent(n.map(function(t){return t.extent[1]}));r=a[1]<0?a[1]:a[0]>0?a[0]:0}t.forEach(function(t){t.values.forEach(function(t){Math.abs(t.extent[0])<Math.abs(r)&&(t.extent[0]=r)})})}var d={},u=function n(c){var u=c.selection?c.selection():c,s={x:d.x,y:d.y};return u.each(function(n,p){var h=d.orient(n,p),f=t(h),g=r(n,p,f),v=s[f.x].copy(),m=s[f.y].copy(),y=d.padding(n,p),x=d.groupPadding(n,p),P=d.bandwidth(n,p);P=(1-y)*(P||l(v,g,f));var k=b.entries(g),w=P/Math.max(1,k.length);x*=w;var F=w-2*x,_=o(v,P,w,x),A=i(m),z=e.select(this).selectAll(".d2b-bar-graphs").data(function(t){return[t]});z=z.merge(z.enter().append("g").attr("class","d2b-bar-graphs"));var M=z.node(),E=M.__d2bPreserveScaleBase__||_,B=M.__d2bPreserveScaleY__||m,G=M.__d2bPreserveTrueBarWidth__||F,R=z.selectAll(".d2b-bar-graph").data(g,function(t){return t.key}),S=R.enter().append("g").attr("class","d2b-bar-graph d2b-graph"),C=R.merge(S).order(),O=R.exit();c!==u&&(C=C.transition(c),O=O.transition(c),O.each(function(t){var r=t.shift;null===r&&(r=v.bandwidth?v.bandwidth()/2:0),e.select(this).selectAll(".d2b-bar-group").transition(c).style("opacity",0).call(a,{x:function(t){return _(t,r)},y:function(){return m(0)}},f).select("rect").attr(f.w,F).attr(f.h,0)})),O.remove(),C.each(function(t){var r=e.select(this),n=t.shift;null===n&&(n=v.bandwidth?v.bandwidth()/2:0);var o=r.selectAll(".d2b-bar-group").data(t.values,function(t){return t.key}),i=o.enter().append("g").attr("class","d2b-bar-group");i.append("rect");var l=o.merge(i).order(),d=o.exit();t.tooltipGraph&&t.tooltipGraph.data(t.values)[f.x](function(t){return v(t.base)+n})[f.y](function(t){return A(t)[1]}).color(function(e){return e.color||t.color}),c!==u&&(l=l.transition(c),d=d.transition(c)),i.attr("class","d2b-bar-group").style("opacity",0).call(a,{x:function(t){return E(t,n)},y:function(){return B(0)}},f).select("rect").attr("fill",function(e){return e.color||t.color}).attr(f.w,G).attr(f.h,0),l.style("opacity",1).call(a,{x:function(t){return _(t,n)},y:function(t){return A.sorted(t)[0]}},f).select("rect").attr("fill",function(e){return e.color||t.color}).attr(f.w,F).attr(f.h,function(t){return A.sorted(t)[1]-A.sorted(t)[0]}),d.style("opacity",0).call(a,{x:function(t){return _(t,n)},y:function(){return m(0)}},f).remove().select("rect").attr(f.w,F).attr(f.h,0)}),M.__d2bPreserveScaleY__=m,M.__d2bPreserveScaleBase__=_,M.__d2bPreserveTrueBarWidth__=F}),n},p=f().values(function(t){return t.values}),b=e.nest().key(function(t){return t.stackBy});return s(u,d).addProp("x",e.scaleLinear()).addProp("y",e.scaleLinear()).addPropGet("type","bar").addPropFunctor("graphs",function(t){return t}).addPropFunctor("padding",.5).addPropFunctor("groupPadding",0).addPropFunctor("bandwidth",null).addPropFunctor("baseline",0).addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("orient","vertical").addPropFunctor("shift",null).addPropFunctor("stackBy",function(t,e){return e}).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values},null).addPropFunctor("color",function(t){return N(t.label)}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addPropFunctor("pcentered",!1).addPropFunctor("pcolor",null).addPropFunctor("pkey",function(t,e){return e}).addMethod("getComputedGraphs",function(t){return(t.selection?t.selection():t).data().map(function(t,e){return r(t,e)})}).addMethod("getVisiblePoints",function(e){return(e.selection?e.selection():e).data().map(function(e,n){var a=d.orient(e,n),o=t(a),i=r(e,n,o),l=[].concat.apply([],i.map(function(t){return t.values.map(function(e){var r={};return r[""+o.x]=e.base,r[""+o.y]=e.extent[0],r.graph=t,r})})),c=[].concat.apply([],i.map(function(t){return t.values.map(function(e){var r={};return r[""+o.x]=e.base,r[""+o.y]=e.extent[1],r.graph=t,r})}));return l.concat(c)})}),u}function S(){function t(e,r,n){return{data:e,index:r,graph:n,x:u.px(e,r),y:u.py(e,r),color:u.pcolor(e,r)||n.color,symbol:u.psymbol(e,r)||n.symbol,key:u.pkey(e,r),size:u.psize(e,r),indicator:u.pindicator(e,r),children:(u.pchildren(e,r)||[]).map(function(e,r){return t(e,r,n)})}}function r(e,r){var n=u.graphs(e,r).map(function(e,r){var n={data:e,index:r,tendancy:u.tendancy(e,r),tooltipGraph:u.tooltipGraph(e,r),shift:u.shift(e,r),key:u.key(e,r),color:u.color(e,r),symbol:u.symbol(e,r)};return n.values=u.values(e,r).map(function(e,r){return t(e,r,n)}),n});return n.forEach(function(t){return t.values.forEach(function(e){return d(e,t.tendancy)})}),n}function a(t,e){t.data.expanded=e,t.children.forEach(function(t){return a(t,e)})}function o(t,e){var r=5,n=5;t.selectAll(".d2b-bubble-indicator.d2b-active").attr("transform",function(){var t=this.getBBox();t.width+r>e&&r>0&&(r=5,n+=t.height+5);var a="translate("+r+", "+n+")";return r+=t.width+5,a})}function i(t,r,n,a,o){t.each(function(t){var i=e.select(this),l=i.attr("transform");l||i.attr("transform","translate("+(n(t.parent?t.parent.x:t.x)+o+",")+(a(t.parent?t.parent.y:t.y)+")")),t.children.length&&!t.data.expanded?i.attr("cursor","pointer").on("click",function(){e.select(this).dispatch("change",{bubbles:!0,cancelable:!0})}).on("change",function(t){return t.data.expanded=!t.data.expanded}):i.attr("cursor","").on("click",null),r&&(i=i.transition(r)),t.data.expanded?i.style("opacity",0).selectAll("*").remove():i.style("opacity",null).call(u.point),i.attr("transform","translate("+(n(t.x)+o)+", "+a(t.y)+")")})}function l(t){t.each(function(t){var r=e.select(this).classed("d2b-active",t.data.expanded);if(!t.data.expanded)return r.selectAll("rect, text, path").remove();var n=r.select("rect"),o=r.select("text"),i=r.select("path");n.size()||(n=r.append("rect")),o.size()||(o=r.append("text")),i.size()||(i=r.append("path")),o.text(function(t){return t.indicator.substring(0,5)}).attr("x",20);var l=o.node().getBBox();o.attr("y",l.height/1.35),n.on("click",function(){e.select(this).dispatch("change",{bubbles:!0,cancelable:!0})}).on("change",function(t){t.data.expanded=!t.data.expanded,t.data.expanded||a(t,!1)}).attr("width",l.width+25).attr("height",l.height).style("fill",u.point.fill()).style("stroke",u.point.stroke()),i.attr("d",function(t){return p.type(t.symbol)()}).attr("transform","translate(10, 9.5)").style("fill",u.point.stroke())})}function c(t,r,n,a,o,d,u,s,p,b,h){var f=arguments.length>11&&void 0!==arguments[11]?arguments[11]:0,g=t.selectAll(".d2b-bubble-pack.d2b-depth-"+f).data(r,function(t){return t.key}),v=g.enter().append("g").attr("class","d2b-bubble-pack d2b-depth-"+f),m=g.merge(v),y=v.append("g").attr("class","d2b-bubble-point");h&&i(y,!1,d,u,s),y.style("opacity",0),i(m.select(".d2b-bubble-point"),n,a,o,s),v.append("g").attr("class","d2b-bubble-indicator"),l(m.select(".d2b-bubble-indicator")),m.each(function(t){var r=e.select(this),i=r.selectAll(".d2b-bubble-pack");i=n?i.transition(n):i,t.children.length&&t.data.expanded?c(r,t.children,n,a,o,d,u,s,p,b,h,f+1):(b&&b(t),i.remove().select(".d2b-bubble-point").style("opacity",0).attr("transform","translate("+[a(t.x)+s,o(t.y)]+")"))});var x=g.exit();n&&(x=x.transition(n)),x.remove()}function d(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;t.children=t.children||[],t.leaves=t.children.length?[]:[t],t.depth=n,t.children.length&&t.children.forEach(function(e){d(e,r,n+1),e.parent=t,t.leaves=t.leaves.concat(e.leaves)}),t.size=t.size||e.sum(t.leaves,function(t){return t.size}),t.x=t.x||(r.x||r)(t.leaves,function(t){return t.x},function(t){return t.size}),t.y=t.y||(r.y||r)(t.leaves,function(t){return t.y},function(t){return t.size})}var u={},p=e.symbol().size(80),b=function t(n){var a=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=n.selection?n:null,l=n.selection?n.selection():n,d=l.selectAll(".d2b-bubble-pack-graphs").data(function(t){return[t]});d=d.merge(d.enter().append("g").attr("class","d2b-bubble-pack-graphs"));var s=d.selectAll(".d2b-bubble-pack-graph").data(function(t,e){return r(t,e)},function(t){return t.key}),p=s.enter().append("g").attr("class","d2b-bubble-pack-graph d2b-graph"),b=s.merge(p).order(),h=s.exit();return i&&(b=b.transition(i),h=h.transition(i)),b.style("opacity",1),h.style("opacity",0).remove(),n.each(function(r,n){var l=e.select(this),d=u.duration(r,n),s=l.selectAll(".d2b-bubble-pack-graph"),p=l.selectAll(".d2b-bubble-pack-graphs").node(),b=p.__d2bPreserveScaleX__||u.x,h=p.__d2bPreserveScaleY__||u.y;l.on("change",function(){l.transition().duration(d).call(t,!1)});var f=0;s.each(function(t){var r=e.select(this),n=u.x.range();f=Math.max(f,Math.abs(n[0]-n[1]));var o=t.shift;null===o&&(o=u.x.bandwidth?u.x.bandwidth()/2:0),u.point.active(function(t){return!!t.children.length}).fill(function(t){return t.color}).type(function(t){return t.symbol});var d=t.tooltipGraph?t.tooltipGraph.clear().x(function(t){return u.x(t.x)+o}).y(function(t){return u.y(t.y)}).color(function(t){return t.color}).addPoint:null;c(r,t.values,i,u.x,u.y,b,h,o,l,d,a)}),o(l,f)}),d.each(function(){this.__d2bPreserveScaleX__=u.x.copy(),this.__d2bPreserveScaleY__=u.y.copy()}),t};return s(b,u).addProp("point",A().size(function(t){return 100*t.size})).addProp("x",e.scaleLinear()).addProp("y",e.scaleLinear()).addPropGet("type","bubblePack").addPropFunctor("duration",250).addPropFunctor("graphs",function(t){return t}).addPropFunctor("tendancy",y,function(t){return arguments.length?(t&&t.tendancy?u.tendancy=function(){return t}:u.tendancy=n(t),b):u.tendancy}).addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("shift",null).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values}).addPropFunctor("color",function(t){return N(t.label)}).addPropFunctor("symbol",function(){return e.symbolCircle}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addPropFunctor("psize",function(t){return t.size}).addPropFunctor("pchildren",function(t){return t.children}).addPropFunctor("pcolor",null).addPropFunctor("psymbol",null).addPropFunctor("pindicator",function(t){return t.label}).addPropFunctor("pkey",function(t,e){return e}).addMethod("getComputedGraphs",function(t){return(t.selection?t.selection():t).data().map(function(t,e){return r(t,e)})}).addMethod("getVisiblePoints",function(t){function e(t,r,n){t.data.expanded?t.children.forEach(function(t){return e(t,r,n)}):r.push({x:t.x,y:t.y,graph:n})}var r=b.getComputedGraphs(t);return r.map(function(t){return[].concat.apply([],t.map(function(t){var r=[];return t.values.forEach(function(n){return e(n,r,t)}),r}))})}),b}function C(){function t(t){return r(e.hierarchy(t,g.children).sum(g.size))}function r(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(t.key=g.key(t.data,e),t.color=g.color(t.data,e),t.label=g.label(t.data,e),t.children)return t.children.forEach(r),t}function n(t){var e=null;return t.each(function(t){t.data.selected&&(e=t)}),e||(e=t),e.data.selected=!0,e}function a(t,e){t.ancestors().concat(t.descendants()).filter(function(t){return t.depth<=e&&t.value>0}).forEach(function(t){return t.visible=!0})}function o(t,e,r,n){var a=g.innerRadius(t,e),o=g.outerRadius(t,e),i=g.ancestorPadding(t,e),l=g.ancestorRatio(t,e),c=0;r.each(function(t){t.visible&&(c=Math.max(c,t.depth))});var d=o-a-i,u=a+d*l,s=g.ancestorBanding.copy().range([a,u]).domain([0,n.depth+1]),p=g.descendantBanding.copy().range([u+i,o]).domain([n.depth+1,c+1]);return function(t){var e=void 0;return e=t<=n.depth?s:p,{inner:e(t),outer:e(t+1)}}}function i(t){return t>Math.PI?F(t)+90:F(t)-90}function c(t,e){var r=(e.inner-e.outer)/2.2;return t>Math.PI?-r:r}function d(t){return t>Math.PI?"end":"start"}function p(t,r,n,a,o,s){var h="arc"===r?l:u;t=t.filter(function(t){return t.visible}),g.pie.startAngle(a).endAngle(o),g.pie(t).forEach(function(t){var e=s.radii(t.data.depth);t.data.startAngle=t.startAngle,t.data.endAngle=t.endAngle,t.data.padAngle=t.padAngle,t.data.innerRadius=e.inner,t.data.outerRadius=e.outer,t.data.centerAngle=(t.startAngle+t.endAngle)/2,t.data.rotate=i(t.data.centerAngle),t.data.labelOffset=c(t.data.centerAngle,e),t.data.labelAnchor=d(t.data.centerAngle)});var f=e.select(this),m="d2b-sunburst-level-"+n,y=f.selectAll(".d2b-sunburst-"+r+"-group."+m),x=y.data();y=y.data(t,function(t){return t.key});var P=y.enter().append("g").attr("class","d2b-sunburst-"+r+"-group "+m),k=P.append("arc"===r?"path":"text").attr("class","d2b-sunburst-"+r+" "+m).each(function(e,r){var n=s.oldRadii(e.depth),a=e.neighbor||b(r,x,t);this.current={startAngle:a.startAngle,endAngle:a.endAngle,innerRadius:n.inner,outerRadius:n.outer,rotate:i((a.startAngle+a.endAngle)/2)},e.children&&e.children.forEach(function(t){return t.neighbor=a})});P.append("g").attr("class","d2b-sunburst-"+r+"-children "+m),"arc"===r?k.style("fill",function(t){return t.color}):k.style("opacity",0).attr("y",4);var w=y.exit();y=y.merge(P),y.select(".d2b-sunburst-"+r+"."+m).classed("d2b-sunburst-ancestor",function(t){return t.depth<t.selected.depth}),s.transition&&(w.each(function(n,a){var o=b(a,t,x),l=e.select(this),d=l.selectAll(".d2b-sunburst-"+r).datum(function(t){var e=s.radii(t.depth);return t.innerRadius=e.inner,t.outerRadius=e.outer,t.startAngle=o.startAngle,t.endAngle=o.endAngle,t.centerAngle=o.centerAngle,t.rotate=i(t.centerAngle),t.labelOffset=c(t.centerAngle,e),t}).transition(s.transition).call(h,v,{omit:["data","children","parent","selected"]});"label"===r&&d.style("opacity",0).attr("x",function(t){return t.labelOffset})}),w=w.transition(s.transition),y=y.transition(s.transition)),w.remove();var F=y.select(".d2b-sunburst-"+r+"."+m).call(h,v,{omit:["data","children","parent","selected"]});"arc"===r?F.style("fill",function(t){return t.color}):F.text(function(t){return t.depth>=t.selected.depth?t.label:""}).style("opacity",1).attr("x",function(t){return t.labelOffset}).style("text-anchor",function(t){return t.labelAnchor}),y.select(".d2b-sunburst-"+r+"-children."+m).each(function(t){var e=t.children||[];p.call(this,e,r,n+1,t.startAngle,t.endAngle,s)})}function b(t,e,r){var n=h(t,e,r),a=f(t,e,r);return n?{startAngle:n.endAngle,endAngle:n.endAngle}:a?{startAngle:a.startAngle,endAngle:a.startAngle}:{startAngle:0,endAngle:0,centerAngle:0}}function h(t,e,r){for(var n=e.length;--t>=0;)for(var a=r[t].key,o=0;o<n;++o)if(e[o].key===a)return e[o]}function f(t,e,r){for(var n=r.length,a=e.length;++t<n;)for(var o=r[t].key,i=0;i<a;++i)if(e[i].key===o)return e[i]}var g={},v=e.arc(),m=function r(i){var l=i.selection?i.selection():i;return g.pie.value(function(t){return t.value}),l.each(function(c,d){var u=e.select(this),s=g.zoomable(c,d),b=g.highlight(c,d),h=g.innerRadius(c,d),f=g.showLabels(c,d),v=t(c),m=n(v);a(m,g.descendantLevels(c,d)+m.depth),v.each(function(t){return t.selected=m});var y=o(c,d,v,m);p.call(this,[v],"arc",0,g.startAngle(c,d),g.endAngle(c,d),{transition:i!==l?i:null,oldRadii:this.oldRadii||y,radii:y,zoomable:s}),p.call(this,f?[v]:[],"label",0,g.startAngle(c,d),g.endAngle(c,d),{transition:i!==l?i:null,oldRadii:this.oldRadii||y,radii:y});var x=u.selectAll(".d2b-sunburst-center");x.data([m]).enter().append("circle").attr("class","d2b-sunburst-center").merge(x).attr("cx",0).attr("cy",0).attr("r",Math.max(0,h)).on("click",function(t){t.parent&&(t.data.selected=!1,t.parent.data.selected=!0,u.transition().duration(g.duration(t,d)).call(r))}),this.oldRadii=y,u.selectAll("path.d2b-sunburst-arc").on("click",s?function(t){v.each(function(t){return t.data.selected=!1}),t.data.selected=!0,u.transition().duration(g.duration(c,d)).call(r)}:null).on("mouseover",b?function(t){var e=t.ancestors();u.selectAll(".d2b-sunburst-arc").classed("d2b-transparent",function(t){return e.indexOf(t)===-1}),u.selectAll(".d2b-sunburst-label").classed("d2b-transparent",function(t){return e.indexOf(t)===-1})}:null).on("mouseout",function(){u.selectAll(".d2b-sunburst-arc").classed("d2b-transparent",!1),u.selectAll(".d2b-sunburst-label").classed("d2b-transparent",!1)})}),r};return s(m,g).addPropFunctor("duration",250).addPropFunctor("key",function(t){return t.label}).addPropFunctor("label",function(t){return t.label}).addPropFunctor("color",function(t){return N(t.label)}).addPropFunctor("children",function(t){return t.children}).addPropFunctor("size",function(t){return t.size}).addPropFunctor("zoomable",!0).addPropFunctor("highlight",!0).addPropFunctor("innerRadius",30).addPropFunctor("outerRadius",200).addPropFunctor("startAngle",0).addPropFunctor("endAngle",2*Math.PI).addPropFunctor("ancestorPadding",10).addPropFunctor("ancestorRatio",.2).addPropFunctor("descendantLevels",1/0).addPropFunctor("showLabels",!1).addProp("ancestorBanding",e.scaleLinear()).addProp("descendantBanding",e.scalePow().exponent(.85)).addProp("pie",e.pie().sort(null)),m}function O(){function t(t,e,r,n,a){var o=[],i=[],l=t.data;l&&(d(t,l,e,r,n),o=[l],t.info.showGrid&&(i=[l])),t.update=r.selectAll(".d2b-"+t.type+"-axis").data(o),t.enter=t.update.enter().append("g").attr("class","d2b-axis d2b-"+t.type+"-axis"),t.labelEnter=t.enter.append("text").attr("class","d2b-axis-label"),t.svg=t.enter.merge(t.update),t.label=t.svg.select(".d2b-axis-label"),t.update.exit().remove(),t.gridUpdate=r.selectAll(".d2b-"+t.type+"-grid").data(i),t.gridEnter=t.gridUpdate.enter().append("g").attr("class","d2b-grid d2b-"+t.type+"-grid"),t.gridUpdate.exit().remove(),t.grid=t.gridEnter.merge(t.gridUpdate),a&&(t.svg=t.svg.transition(a),t.update=t.update.transition(a),t.grid=t.grid.transition(a),t.gridUpdate=t.gridUpdate.transition(a),t.label=t.label.transition(a))}function r(t,e,r,n){t.data&&(l(t),c(t,e),t.enter.call(t.info.axis).attr("transform","translate("+r+", "+n+")"),t.update.call(t.info.axis).attr("transform","translate("+r+", "+n+")"),t.svg.call(g,t).on("end",function(){t.svg.call(g,t)}))}function n(t,e,r){t.data&&(i(t,r),c(t,e),t.gridUpdate.call(t.info.axis).selectAll(".tick text").remove(),t.gridEnter.call(t.info.axis).selectAll(".tick text").remove())}function o(t,e){t.data&&(t.labelEnter.text(t.info.label).attr("x",h(t,e)).attr("y",b(t)).attr("text-anchor",u(t)),t.label.text(t.info.label).attr("x",h(t,e)).attr("y",b(t)).attr("text-anchor",u(t)))}function i(t,e){if(t.data)switch(t.type){case"x":return t.info.axis.tickSize("inner"===t.info.orient?-e:e);case"x2":return t.info.axis.tickSize("inner"===t.info.orient?e:-e);case"y":return t.info.axis.tickSize("inner"===t.info.orient?e:-e);case"y2":return t.info.axis.tickSize("inner"===t.info.orient?-e:e)}}function l(t){t.data&&t.info.axis.tickSizeOuter(0).tickSizeInner(t.info.tickSize)}function c(t,e){t.data&&t.info.axis.scale().range([0,e])}function d(t,e,r,n,a){if(t.data){var o=t.info={};o.axis=y.axis(e,r),o.orient=y.orient(e,r),o.wrapLength=y.wrapLength(e,r),o.label=y.label(e,r)||"",o.labelOrient=y.labelOrient(e,r),o.tickSize=y.tickSize(e,r),o.showGrid=y.showGrid(e,r),o.labelOrient1=o.labelOrient.split(" ")[0],o.labelOrient2=o.labelOrient.split(" ")[1],o.wrapAnchor=p(t),l(t),c(t,a);var i=n.append("g").attr("class","d2b-axis d2b-"+t.type+"-axis").call(o.axis).call(g,t);o.axisBox=i.node().getBBox();var d=i.append("text").attr("class","d2b-axis-label d2b-"+t.type+"-label").text(o.label);o.labelBox=d.node().getBBox(),i.remove()}}function u(t){if(t.data){var e=t.info,r=["y","y2"].indexOf(t.type)>-1;return"start"===e.labelOrient2&&r?"end":"end"!==e.labelOrient2||r?"middle"===e.labelOrient2?"middle":"start":"end"}}function p(t){if(t.data)switch(t.type){case"x":return"inner"===t.info.orient?"end":"start";case"x2":return"outer"===t.info.orient?"end":"start";case"y":case"y2":return"middle";default:return"start"}}function b(t){if(t.data){var e=t.info;switch(t.type+" "+e.orient+" "+e.labelOrient1){case"x inner inner":case"x2 outer outer":return-e.axisBox.height-x;case"x inner outer":case"x2 outer inner":return e.labelBox.height+x;case"x outer inner":case"x2 inner outer":case"y inner outer":case"y2 outer inner":return-x;case"x outer outer":case"x2 inner inner":return e.labelBox.height+e.axisBox.height+x;case"y inner inner":case"y2 outer outer":return e.labelBox.height+e.axisBox.width+x;case"y outer inner":case"y2 inner outer":return e.labelBox.height+x;case"y outer outer":case"y2 inner inner":return-e.axisBox.width-x}}}function h(t,e){if(t.data)return"start"===t.info.labelOrient2?0:"middle"===t.info.labelOrient2?e/2:e}function f(t){var e={top:0,left:0,right:0,bottom:0};return t.x.data&&("outer"===t.x.info.orient&&(e.bottom+=t.x.info.axisBox.height),"outer"===t.x.info.labelOrient1&&(e.bottom+=t.x.info.labelBox.height+x)),t.x2.data&&("outer"===t.x2.info.orient&&(e.top+=t.x2.info.axisBox.height),"outer"===t.x2.info.labelOrient1&&(e.top+=t.x2.info.labelBox.height)),t.y.data&&("outer"===t.y.info.orient&&(e.left+=t.y.info.axisBox.width),"outer"===t.y.info.labelOrient1&&(e.left+=t.y.info.labelBox.height)),t.y2.data&&("outer"===t.y2.info.orient&&(e.right+=t.y2.info.axisBox.width),"outer"===t.y2.info.labelOrient1&&(e.right+=t.y2.info.labelBox.height+x)),e.top=Math.max(e.top,10),e.bottom=Math.max(e.bottom,10),e.left=Math.max(e.left,10),e.right=Math.max(e.right,10),e}function g(t,r){if(r.data){var n=r.info.wrapLength,o=r.info.wrapAnchor;t.selectAll(".tick text").each(function(){var t=e.select(this);(t.html()||"").indexOf("tspan")===-1&&(this.storeText=t.text()),t.text("")}).call(a,function(){return this.storeText},n,o)}}function v(t){return"number"==typeof t?{top:t,left:t,right:t,bottom:t}:t}function m(t){return v(t||0)}var y={},x=5,P=function a(i){var l=i.selection?i.selection():i;return l.each(function(a,c){var d=y.size.call(this,a,c)||{width:960,height:500},u=m(y.margin.call(this,a,c)),s=y.x.call(this,a,c),p=y.x2.call(this,a,c),b=y.y.call(this,a,c),h=y.y2.call(this,a,c),g=e.select(this),x={x:{type:"x",data:s},x2:{type:"x2",data:p},y:{type:"y",data:b},y2:{type:"y2",data:h}},P=v(y.padding.call(this,a,c)),k=g.selectAll(".d2b-plane").data([a]),w=k.enter().append("g").attr("class","d2b-plane"),F=k.merge(w),_=i!==l?i:null;t(x.x,c,F,d.width,_),t(x.x2,c,F,d.width,_),t(x.y,c,F,d.height,_),t(x.y2,c,F,d.height,_),P||(P=f(x));var A={top:P.top+u.top,bottom:P.bottom+u.bottom,left:P.left+u.left,right:P.right+u.right};A.width=d.width-A.left-A.right,A.height=d.height-A.top-A.bottom,this.__box__=A,_&&(k=k.transition(_)),w.attr("transform","translate("+A.left+", "+A.top+")"),k.attr("transform","translate("+A.left+", "+A.top+")"),r(x.x,A.width,0,A.height),r(x.x2,A.width,0,0),r(x.y,A.height,0,0),r(x.y2,A.height,A.width,0),n(x.x,A.width,A.height),n(x.x2,A.width,A.height),n(x.y,A.height,A.width),n(x.y2,A.height,A.width),o(x.x,A.width),o(x.x2,A.width),o(x.y,-A.height),o(x.y2,-A.height)}),a};return s(P,y).addPropFunctor("size",function(t){return t.size}).addPropFunctor("padding",null).addPropFunctor("margin",0).addPropFunctor("x",function(t){return t.x}).addPropFunctor("x2",function(t){return t.x2}).addPropFunctor("y",function(t){return t.y}).addPropFunctor("y2",function(t){return t.y2}).addPropFunctor("axis",function(t){return t.axis}).addPropFunctor("orient",function(t){return t.orient||"outer"}).addPropFunctor("wrapLength",function(t){return t.wrapLength||1/0}).addPropFunctor("tickSize",function(t){return t.tickSize||6}).addPropFunctor("showGrid",function(t){return null===t.showGrid||void 0===t.showGrid||t.showGrid}).addPropFunctor("label",function(t){return t.label}).addPropFunctor("labelOrient",function(t){return t.labelOrient||"outer middle"}).addMethod("box",function(t){var e=t.node?t.node():t;
return e?e.__box__:null}),P}function T(){function t(t,l){var s=e.select(this),p=s.select(".d2b-chart-container"),g=p.node().__size__,v=o.radius(t,g.width,g.height),m=o.startAngle(t),y=o.endAngle(t),x=o.donutRatio(t),P=o.legend.empty(),k=o.values(t).filter(function(t){return!P(t)});o.legend.html(o.label),s.select(".d2b-legend-container").call(o.legend).on("change",function(){return s.transition(o.duration(t)).call(i)}).selectAll(".d2b-legend-item").on("mouseover",function(t){n.call(this,s,t)}).on("mouseout",function(t){a.call(this,s,t)});var w=e.sum(k,function(t){return o.value(t)}),F=p.selectAll(".d2b-pie-chart").data([k]),_=F.enter().append("g").attr("class","d2b-pie-chart"),A=function(t){return t=c.startAngle(m).endAngle(y)(t),t.forEach(function(t){t.outerRadius=v,t.innerRadius=v*x}),t};F=F.merge(_).datum(A),l&&(F=F.transition(l)),F.call(h);var z=p.selectAll(".d2b-pie-arc").each(function(t){this.__outerRadius__=t.outerRadius,t.__percent__=t.value/w}).on("mouseover",function(t){n.call(this,s,t.data)}).on("mouseout",function(t){a.call(this,s,t.data)}).call(o.tooltip),M=z.selectAll(".d2b-pie-arc-percent").data(function(t){return[t]});M.enter().append("g").attr("class","d2b-pie-arc-percent").append("text").attr("y",6),z.each(function(){var t=e.select(this),r=t.select(".d2b-pie-arc path").node().current,n=t.select(".d2b-pie-arc-percent"),a=n.select("text").node();n.node().current=r,a.current=a.current||0}),l&&(z=z.each(function(){this.transitioning=!0}).transition(l).on("end",function(){this.transitioning=!1})),z.select(".d2b-pie-arc-percent").call(u,b).select("text").call(d,function(t){return o.value(t.data)/w},f).style("opacity",function(t){return o.showPercent.call(this,t.data,w)?1:0});var E=r(t,v,g);_.attr("transform","translate("+E.x+", "+E.y+")"),F.attr("transform","translate("+E.x+", "+E.y+")")}function r(t,e,r){var n=o.center(t,r.width,r.height,e),a=o.at(t,r.width,r.height).split(" ");if(!n){switch(a={x:a[1],y:a[0]},n={},a.x){case"left":n.x=e;break;case"center":case"middle":n.x=r.width/2;break;case"right":default:n.x=r.width-e}switch(a.y){case"bottom":n.y=r.height-e;break;case"center":case"middle":n.y=r.height/2;break;case"top":default:n.y=e}}return n}function n(t,e){this.transitioning||t.selectAll(".d2b-pie-arc").filter(function(t){return t.data===e}).each(function(t){t.outerRadius=1.03*this.__outerRadius__}).select("path").transition().duration(100).call(l,b)}function a(t,e){this.transitioning||t.selectAll(".d2b-pie-arc").filter(function(t){return t.data===e}).each(function(t){t.outerRadius=this.__outerRadius__}).select("path").transition().duration(100).call(l,b)}var o={},i=function e(r){r.call(o.chartFrame);var n=r.selection?r.selection():r;return n.each(function(e){t.call(this,e,r!==n?r:null)}),e},c=e.pie().sort(null),b=e.arc().outerRadius(function(t){return t.outerRadius}).innerRadius(function(t){return t.innerRadius}),h=M().arc(b),f=e.format(".0%");return s(i,o).addProp("chartFrame",m().legendEnabled(!0).breadcrumbsEnabled(!1)).addProp("legend",v().clickable(!0).dblclickable(!0)).addProp("key",function(t){return t.label},null,function(t){o.legend.key(t),h.key(t)}).addProp("tooltip",p().followMouse(!0).html(function(t){return"<b>"+o.label(t.data)+"</b>: "+o.value(t.data)+" ("+f(t.__percent__)+")"})).addPropFunctor("duration",250).addPropFunctor("values",function(t){return t}).addPropFunctor("donutRatio",0).addPropFunctor("startAngle",0).addPropFunctor("endAngle",2*Math.PI).addPropFunctor("at","center center").addPropFunctor("showPercent",function(t,e){return o.value(t)/e>.03}).addPropFunctor("center",null).addPropFunctor("radius",function(t,e,r){return Math.min(e,r)/2}).addPropFunctor("sort",null).addPropFunctor("color",function(t){return N(t.label)},null,function(t){o.tooltip.color(function(r){return e.rgb(t(r.data)).darker(.3)}),o.legend.color(t),h.color(t)}).addPropFunctor("value",function(t){return t.value},null,function(t){return c.value(t)}).addPropFunctor("label",function(t){return t.label}),i}function L(){function t(t,a){var s=e.select(this),p=s.select(".d2b-chart-container"),g=s.select(".d2b-legend-container"),v=p.node().__size__,m=n(t),y=o(m),P=b.duration(t),k=r(t,m);i(k);var w=this.tooltip=this.tooltip||h().trackX(!0).trackY(!1).threshold(50);w.title(function(t){return""+(t[0].x||t[0].x1)}).clear(),b.legend.values(k).empty(function(t){return t.data.hidden}).setEmpty(function(t,e,r){return t.data.hidden=r}).html(function(t){return t.label}).color(function(t){return t.color}),g.call(b.legend).on("change",function(){return s.transition().duration(P).call(f)}).selectAll(".d2b-legend-item").on("mouseover",function(t){return l(t,p)}).on("mouseout",function(t){return c(t,p)}),b.plane.size(v);var F=p.selectAll(".d2b-axis-plane").data([t]),_=F,A=F.enter().append("g").attr("class","d2b-axis-plane");F=F.merge(A);var z=p.selectAll(".d2b-axis-wrapper").data([t]),M=z,E=z.enter().append("g").attr("class","d2b-axis-wrapper");E.append("rect").attr("class","d2b-axis-background"),z=z.merge(E);var B=z.selectAll(".d2b-axis-set").data(m),G=B.enter().append("g").attr("class","d2b-axis-set"),R=B.exit();B=B.merge(G).order(),a&&(R=R.transition(a),M=M.transition(a),_=_.transition(a));var S={x:[],x2:[],y:[],y2:[]};B.each(function(t){var r=e.select(this);this.genUpdate=r.selectAll(".d2b-graph-generator").data(t.generators,function(t){return t.key}),this.genEnter=this.genUpdate.enter().append("g").attr("class","d2b-graph-generator").style("opacity",0),this.genExit=this.genUpdate.exit(),this.gen=this.genUpdate.merge(this.genEnter).order(),this.gen.each(function(r,n){var a=e.select(this),o=r.generator.tooltipGraph(function(t){if(n)return null;var e=w.graph(X());return d(t,y).tooltipConfig(e),e}).color(function(t){return d(t,y).color}).graphs(t.graphs.map(function(t){return t.data}).filter(function(t){return!t.hidden})).getVisiblePoints(a)[0];r.generator.duration&&r.generator.duration(P),o.forEach(function(t){var e=d(t.graph,y);S[e.xType||"x"].push(t.x),S[e.yType||"y"].push(t.y)})})});var C=b.x(t,S.x),O=b.y(t,S.y),T=b.x2(t,S.x2),L=b.y2(t,S.y2);u(C,S.x,x.x),u(O,S.y,x.y,!0),u(T,S.x2,x.x2),u(L,S.y2,x.y2,!0),b.plane.axis(function(t){return t.__axis__}).x(C.__axis__?C:null).y(O.__axis__?O:null).x2(T.__axis__?T:null).y2(L.__axis__?L:null),A.call(b.plane),_.call(b.plane);var Y=b.plane.box(F);B.each(function(){a&&(this.genUpdate=this.genUpdate.transition(a),this.genExit=this.genExit.transition(a).style("opacity",0)),this.genExit.remove(),this.gen.each(function(t){var r=e.select(this);a&&(r=r.transition(a)),t.generator.x(C.__axis__.scale()).y(O.__axis__.scale()),r.style("opacity",1).call(t.generator)}),e.select(this).on("change",function(){return s.transition().duration(P).call(f)})}),R.style("opacity",0).remove(),E.attr("transform","translate("+Y.left+", "+Y.top+")").select("rect.d2b-axis-background").attr("height",Math.max(0,Y.height)).attr("width",Math.max(0,Y.width)),M.attr("transform","translate("+Y.left+", "+Y.top+")").select("rect.d2b-axis-background").attr("height",Math.max(0,Y.height)).attr("width",Math.max(0,Y.width)),w.row(function(t){var e=d(t.graph.data,y).label;return e+": "+(t.y||t.y1)}),b.tooltipConfig(w),w.svgContainer(z).tracker(z).size(Y)}function r(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n(t),r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o(e),a=r.filter(function(t){return!t.group});return a.forEach(function(t){t.groupType="graph",t.groupGraphs=[t]}),(b.groups(t)||[]).map(function(t){var e={groupType:"group",data:t,label:b.groupLabel(t),color:b.groupColor(t)};return e.groupGraphs=r.filter(function(t){return e.label===t.group}),e.groupGraphs.forEach(function(t){t.color=e.color}),e}).concat(a)}function n(t){return b.sets(t).map(function(t){var e={};return{data:t,generators:b.setGenerators(t).map(function(t){var r=b.generator(t),n=r.type();return e[n]=e[n]||0,{data:t,key:n+"-"+(e[n]+=1),generator:r}}),graphs:a(t)}})}function a(t){return b.setGraphs(t).map(function(t){return{data:t,label:b.graphLabel(t)||"",color:b.graphColor(t),group:b.graphGroup(t),tooltipConfig:b.graphTooltipConfig||function(){}}})}function o(t){return[].concat.apply([],t.map(function(t){return t.graphs}))}function i(t){t.forEach(function(t){t.groupGraphs.forEach(function(e){return e.data.hidden=t.data.hidden})})}function l(t,e){var r=e.selectAll(".d2b-graph");t.groupGraphs.some(function(t){return!t.data.hidden})&&r.style("opacity",.2).filter(function(e){return t.data===e.data||(t.groupGraphs.map(function(t){return t.data})||[]).indexOf(e.data)>-1}).style("opacity","")}function c(t,e){e.selectAll(".d2b-graph").style("opacity",1)}function d(t,e){return e.filter(function(e){return e.data===t||e.data===t.data})[0]}function u(t,e,r,n){if(e.length){var a=t.axis||r.axis,o=t.scale?t.scale.copy():p(e,r),i=o.domain();if(n&&i.reverse(),!o.bandwidth&&t.linearPadding){var l=i[1]-i[0];i[0]=i[0]+l*t.linearPadding[0],i[1]=i[1]+l*t.linearPadding[1]}o.domain(i),t.__axis__=a.scale(o)}}function p(t,r){var n=t.some(function(t){return isNaN(t)}),a=n?e.set(t).values():e.extent(t),o=n?r.band:r.linear;return o.domain(a)}var b={},f=function e(r){r.call(b.chartFrame);var n=r.selection?r.selection():r;return n.each(function(e){t.call(this,e,r!==n?r:null)}),e};s(f,b).addProp("plane",O()).addProp("chartFrame",m().legendEnabled(!0).breadcrumbsEnabled(!1)).addProp("legend",v().clickable(!0).dblclickable(!0)).addPropFunctor("duration",250).addPropFunctor("x",function(){return{}}).addPropFunctor("y",function(){return{}}).addPropFunctor("x2",function(){return{}}).addPropFunctor("y2",function(){return{}}).addPropFunctor("tooltipConfig",function(t){return t.tooltipConfig}).addPropFunctor("groups",function(t){return t.groups}).addPropFunctor("sets",function(t){return t.sets}).addPropFunctor("generator",function(t){return t}).addPropFunctor("groupLabel",function(t){return t.label}).addPropFunctor("groupColor",function(t){return N(b.groupLabel(t))}).addPropFunctor("setGenerators",function(t){return t.generators}).addPropFunctor("setGraphs",function(t){return t.graphs}).addPropFunctor("graphLabel",function(t){return t.label}).addPropFunctor("graphGroup",function(t){return t.group}).addPropFunctor("graphColor",function(t){return N(b.graphLabel(t))}).addPropFunctor("graphTooltipConfig",function(t){return t.tooltipConfig});var g=e.scaleBand(),y=e.scaleLinear(),x={x:{band:g.copy(),linear:y.copy(),axis:e.axisBottom()},y:{band:g.copy(),linear:y.copy(),axis:e.axisLeft()},x2:{band:g.copy(),linear:y.copy(),axis:e.axisTop()},y2:{band:g.copy(),linear:y.copy(),axis:e.axisRight()}};return f}function Y(){function t(t,e){t.select(".d2b-breadcrumbs-container").datum(e).transition("sunburst-breadcrumbs").duration(100).call(a.breadcrumbs)}function r(e){var n=e.select(".d2b-sunburst-chart"),o=e.selectAll(".d2b-sunburst-arc.d2b-sunburst-level-0").datum(),i=o.selected;t(e,[i]),n.selectAll(".d2b-sunburst-arc").call(a.tooltip.clear).call(a.tooltip).on("mouseover.breadcrumbs",function(r){var n=r.ancestors();n=n.slice(0,n.indexOf(i)+1),t(e,n.reverse())}).on("mouseout.breadcrumbs",function(){return t(e,[i])}),n.on("mouseout",function(){return r(e)}).on("click",function(){return r(e)})}function n(t,n){var o=e.select(this),i=o.select(".d2b-chart-container"),l=i.node().__size__,c="translate("+l.width/2+", "+l.height/2+")",d=i.selectAll(".d2b-sunburst-chart").data(function(t){return[t]}),u=d.enter().append("g").attr("transform",c).attr("class","d2b-sunburst-chart");d=d.merge(u),n&&(d=d.transition(n)),a.sunburst.outerRadius(a.outerRadius(t,l.width,l.height)).innerRadius(a.innerRadius(t,l.width,l.height)),d.attr("transform",c).call(a.sunburst),r(o)}var a={},o=function t(e){e.call(a.chartFrame);var r=e.selection?e.selection():e;return r.each(function(t){n.call(this,t,e!==r?e:null)}),t};s(o,a).addProp("chartFrame",m().legendEnabled(!1).breadcrumbsEnabled(!0)).addProp("sunburst",C()).addProp("breadcrumbs",g()).addProp("tooltip",p(),null,function(t){return t.color(function(t){return t.color})}).addPropFunctor("duration",250).addPropFunctor("outerRadius",function(t,e,r){return Math.min(e,r)/2}).addPropFunctor("innerRadius",function(t,e,r){return Math.min(50,Math.min(e,r)/4)});var i=e.format(",.0f"),l=e.format(".1%"),c=function(t){var e=t.value/t.selected.value,r=e>1?"":"<div class = 'd2b-sunburst-percent'>\n        "+l(t.value/t.selected.value)+"\n      </div>";return"\n      <div class = 'd2b-sunburst-label'>\n        "+t.label+"\n      </div>\n      <div class = 'd2b-sunburst-value'>\n        "+i(t.value)+"\n        "+r+"\n      </div>\n    "};return a.breadcrumbs.html(function(t){return"<div class = 'd2b-sunburst-breadcrumb'>"+c(t)+"</div>"}).color(function(t){return t.color}).key(function(t,e){return e}),a.tooltip.followMouse(!0).html(function(t){return"<div class = 'd2b-sunburst-tooltip'>"+c(t)+"</div>"}),o}r('@import "//netdna.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.css";.d2b-vue-container{width:100%;height:100%}.d2b-pie-chart .d2b-pie-arc path{stroke-width:1px;stroke:#fff}.d2b-pie-chart .d2b-pie-arc text{fill:#fff;font-weight:700;pointer-events:none;text-anchor:middle}.d2b-axis-wrapper .d2b-axis-background{opacity:0}.d2b-chart-breadcrumbs{width:200px;padding-left:10px}.d2b-sunburst-breadcrumb .d2b-sunburst-label,.d2b-sunburst-tooltip .d2b-sunburst-label{text-align:center}.d2b-sunburst-breadcrumb .d2b-sunburst-value,.d2b-sunburst-tooltip .d2b-sunburst-value{font-size:14pt;margin-top:5px}.d2b-sunburst-breadcrumb .d2b-sunburst-percent{float:right}.d2b-breadcrumbs:not(.d2b-vertical) .d2b-sunburst-percent{margin-left:30px}.d2b-sunburst-tooltip{text-align:center}.d2b-sunburst-tooltip .d2b-sunburst-percent{display:inline}.d2b-sunburst-tooltip .d2b-sunburst-percent:before{content:"("}.d2b-sunburst-tooltip .d2b-sunburst-percent:after{content:")"}.d2b-line-graph .d2b-line{stroke-width:1.5px;fill:none}.d2b-area-graph .d2b-area{stroke:none;fill-opacity:0.3}.d2b-bar-graph .d2b-bar-group rect{opacity:0.8}.d2b-bubble-pack-graph .d2b-bubble-point{opacity:0.75}.d2b-bubble-pack-graph .d2b-bubble-indicator rect{fill-opacity:0.25;stroke-opacity:0.9;cursor:pointer;stroke-width:1px}.d2b-bubble-pack-graph .d2b-bubble-indicator rect:hover{stroke-width:2px}.d2b-bubble-pack-graph .d2b-bubble-indicator path,.d2b-bubble-pack-graph .d2b-bubble-indicator text{pointer-events:none}.d2b-plane text{font-size:10pt}.d2b-plane .d2b-y2-axis .d2b-axis-label,.d2b-plane .d2b-y-axis .d2b-axis-label{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.d2b-plane .d2b-y2-axis .tick line,.d2b-plane .d2b-y-axis .tick line{stroke-width:0.6px}.d2b-plane .d2b-grid .tick line{stroke-width:0.2px;stroke-opacity:0.4;//:5 5}.d2b-plane .d2b-grid .tick text{display:none}.d2b-plane .d2b-axis-label{fill:#000;font-weight:700}.d2b-plane .tick line{//:#aaa}.d2b-plane path.domain{stroke-width:0.4px;stroke-opacity:0.4}.d2b-sunburst-arc{-webkit-transition:opacity 0.2s,stroke-width 0.2s;transition:opacity 0.2s,stroke-width 0.2s;cursor:pointer;opacity:0.9;stroke-width:0.8px;stroke:#fff}.d2b-sunburst-arc.d2b-transparent{fill-opacity:0.2}.d2b-sunburst-label{font-size:8pt;fill-opacity:0.8;pointer-events:none;font-family:arial}.d2b-sunburst-label.d2b-transparent{fill-opacity:0.2}.d2b-sunburst-center{fill-opacity:0;stroke:none;cursor:pointer}.d2b-sunburst-ancestor{opacity:0.4}.d2b-tooltip-area{pointer-events:none}.d2b-tooltip-area .d2b-tooltip{background:#fff;border:1px solid #bbb;border-radius:2px;position:fixed;box-shadow:0px 0px 2px #ccc}.d2b-tooltip-area .d2b-tooltip-content{padding:6px 10px}.d2b-tooltip-area .d2b-tooltip{margin:0}.d2b-tooltip-area .d2b-tooltip:before{left:0;top:0;position:absolute;z-index:2;content:""}.d2b-tooltip-area .d2b-tooltip-top{-webkit-transform:translate(-50%,-100%);transform:translate(-50%,-100%);margin-left:0;margin-top:-15px}.d2b-tooltip-area .d2b-tooltip-top:before{-webkit-transform:translateX(-50%);transform:translateX(-50%);left:50%;top:100%;width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 6px 0;border-top-color:inherit}.d2b-tooltip-area .d2b-tooltip-bottom{-webkit-transform:translate(-50%,0);transform:translate(-50%,0);margin-left:0;margin-top:15px}.d2b-tooltip-area .d2b-tooltip-bottom:before{-webkit-transform:translateX(-50%);transform:translateX(-50%);left:50%;top:-6px;width:0;height:0;border-style:solid;border-color:transparent;border-width:0 6px 6px;border-bottom-color:inherit}.d2b-tooltip-area .d2b-tooltip-right{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);margin-left:15px;margin-top:0}.d2b-tooltip-area .d2b-tooltip-right:before{-webkit-transform:translateY(-50%);transform:translateY(-50%);left:-6px;top:50%;width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 6px 6px 0;border-right-color:inherit}.d2b-tooltip-area .d2b-tooltip-left{-webkit-transform:translate(-100%,-50%);transform:translate(-100%,-50%);margin-left:-15px;margin-top:0}.d2b-tooltip-area .d2b-tooltip-left:before{-webkit-transform:translateY(-50%);transform:translateY(-50%);left:100%;top:50%;width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 0 6px 6px;border-left-color:inherit}.d2b-tooltip-axis-area{pointer-events:none;font-family:Arial}.d2b-tooltip-axis-area .d2b-tooltip-marker{stroke-width:2px;stroke:#bbb;stroke-dasharray:5,5}.d2b-tooltip-axis-area .d2b-tooltip{opacity:0.9;white-space:nowrap;border:1px solid #ddd;background:hsla(0,0%,100%,.8);position:absolute;box-shadow:0px 0px 2px #ccc}.d2b-tooltip-axis-area .d2b-tooltip .d2b-tooltip-title{text-align:center;background:rgba(150,165,175,.8);padding:5px 10px;font-weight:700;color:#fff}.d2b-tooltip-axis-area .d2b-tooltip .d2b-tooltip-content{padding:5px 10px}.d2b-tooltip-axis-area .d2b-tooltip .d2b-tooltip-content .d2b-tooltip-row{padding-left:5px;border-left-width:3px;border-left-style:solid;margin-bottom:5px}.d2b-tooltip-axis-area .d2b-tooltip .d2b-tooltip-content .d2b-tooltip-row:last-child{margin-bottom:0px}.d2b-breadcrumbs{color:#555;font-size:9pt;box-sizing:content-box}.d2b-breadcrumbs .d2b-breadcrumb{border:0px solid transparent;border-left-width:8px;border-bottom-width:1px;padding:6px 13px;margin-bottom:10px;text-transform:uppercase;position:relative}.d2b-breadcrumbs .d2b-breadcrumb:first-child .d2b-breadcrumb-icon:after,.d2b-breadcrumbs .d2b-breadcrumb:last-child .d2b-breadcrumb-icon:after{position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);left:-15.5px;width:13px;height:13px;text-align:center;font-family:FontAwesome;color:#fff;background-color:inherit;padding:5px;border-radius:15px}.d2b-breadcrumbs .d2b-breadcrumb:first-child .d2b-breadcrumb-icon:after{content:"\\f015"}.d2b-breadcrumbs .d2b-breadcrumb:not(:first-child):last-child .d2b-breadcrumb-icon:after{content:"\\f25a"}.d2b-breadcrumbs:not(.d2b-vertical){white-space:nowrap}.d2b-breadcrumbs:not(.d2b-vertical) .d2b-breadcrumb{border-right-width:1px;border-top-width:1px;white-space:nowrap;display:inline-block}.d2b-breadcrumbs:not(.d2b-vertical) .d2b-breadcrumb:not(:last-child){margin-right:20px}.d2b-breadcrumbs:not(.d2b-vertical) .d2b-breadcrumb:not(:last-child):after{width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 0 6px 6px;border-left-color:inherit;position:absolute;z-index:2;content:"";top:50%;left:100%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.d2b-breadcrumbs.d2b-vertical .d2b-breadcrumb{/*&:after {\n      triangle: pointing-right;\n      width: 100px;\n      height: 100px;\n      background-color: inherit;\n      position: absolute;\n      z-index: 2;\n      content: \'\';\n\n      top: 100%;\n      left: 50%;\n\n      transform: translateX(-50%);\n\n    }*/}.d2b-breadcrumbs.d2b-vertical .d2b-breadcrumb:not(:last-child):after{width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 6px 0;border-top-color:inherit;position:absolute;z-index:2;content:"";top:100%;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.stuff{display:none}.d2b-legend{color:#555;font-size:9pt}.d2b-legend .d2b-legend-item{border:0px solid transparent;padding:2px;padding-left:18px;position:relative;cursor:pointer}.d2b-legend .d2b-legend-item .d2b-legend-icon{position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);left:7px;width:12px;height:12px}.d2b-legend .d2b-legend-item .d2b-legend-svg-icon{margin-left:-5px;margin-top:-5px;pointer-events:none}.d2b-legend .d2b-legend-item .d2b-legend-svg-icon path,.d2b-legend .d2b-legend-item .d2b-legend-svg-icon text{font-family:FontAwesome;text-anchor:middle;alignment-baseline:central;stroke-width:1px;fill-opacity:0.8}.d2b-legend:not(.d2b-vertical) .d2b-legend-item{display:inline-block}.d2b-legend:not(.d2b-vertical) .d2b-legend-item:not(:last-child){margin-right:10px}.d2b-legend:not(.d2b-vertical) .d2b-legend-icon{margin-top:1.5px}.d2b-chart-frame{height:100%;width:100%;position:relative}.d2b-chart-frame .d2b-breadcrumbs-frame,.d2b-chart-frame .d2b-chart,.d2b-chart-frame .d2b-legend-frame{position:absolute;overflow:auto}.d2b-chart-frame .d2b-breadcrumbs-frame .d2b-breadcrumbs,.d2b-chart-frame .d2b-legend-frame .d2b-breadcrumbs{padding-left:10px;padding-right:2px}.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical),.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical){overflow-y:hidden}.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical) .d2b-breadcrumbs,.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical) .d2b-legend,.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical) .d2b-legend-item,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical) .d2b-breadcrumbs,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical) .d2b-legend,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical) .d2b-legend-item{white-space:nowrap;overflow-y:hidden}.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical).d2b-legend-frame,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical).d2b-legend-frame{height:20px;text-align:center}.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical).d2b-breadcrumbs-frame,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical).d2b-breadcrumbs-frame{height:55px}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-breadcrumbs-container,.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-legend-container,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-breadcrumbs-container,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-legend-container{display:table;height:100%;width:100%}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-breadcrumbs-container .d2b-legend,.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-legend-container .d2b-legend,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-breadcrumbs-container .d2b-legend,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-legend-container .d2b-legend{display:table-cell;vertical-align:middle}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-breadcrumbs-container .d2b-breadcrumbs,.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-legend-container .d2b-breadcrumbs,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-breadcrumbs-container .d2b-breadcrumbs,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-legend-container .d2b-breadcrumbs{display:table-cell;vertical-align:top}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical.d2b-breadcrumbs-frame,.d2b-chart-frame .d2b-legend-frame.d2b-vertical.d2b-breadcrumbs-frame{width:180px}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical.d2b-legend-frame,.d2b-chart-frame .d2b-legend-frame.d2b-vertical.d2b-legend-frame{width:110px}',void 0);var X=function(){return Math.random().toString(36).substr(2,9)},N=e.scaleOrdinal(e.schemeCategory10),U=function(t){return null===t?NaN:+t};y.tendancy="mean",x.tendancy="median",P.tendancy="mode",k.tendancy="range",w.tendancy="midpoint";var W=Math.PI,I=Math.sqrt(8),D=Math.sqrt(2),V={draw:function(t,e){var r=Math.sqrt(e/(W+5/4)),n=.3125*r,a=2*Math.asin(.25),o=(W/2-a)/2,i=r/I-r*Math.cos(o),l=r*Math.sin(o);t.arc(i,l,r,-o,2*W-a-o),t.lineTo(r*(5/4-1/D),-r*(1/I+5/4-1/D)),t.lineTo(r*(5/4-1/D)-n,-r*(1/I+5/4-1/D)),t.lineTo(r*(5/4-1/D)-n,-r*(1/I+7/4-1/D)),t.lineTo(r*(7/4-1/D+1/I),-r*(1/I+7/4-1/D)),t.lineTo(r*(7/4-1/D+1/I),-r*(5/4-1/D)+n),t.lineTo(r*(5/4-1/D+1/I),-r*(5/4-1/D)+n),t.lineTo(r*(5/4-1/D+1/I),-r*(5/4-1/D)),t.closePath()}},q={draw:function(t,e){var r=Math.sqrt(e/(W+5/4)),n=2*Math.asin(.25),a=r/4-r*Math.cos(n/2);t.arc(0,a,r,3*-W/2+n/2,W/2-n/2),t.lineTo(r/4,3*r/4),t.lineTo(3*r/4,3*r/4),t.lineTo(3*r/4,5*r/4),t.lineTo(r/4,5*r/4),t.lineTo(r/4,7*r/4),t.lineTo(-r/4,7*r/4),t.lineTo(-r/4,5*r/4),t.lineTo(3*-r/4,5*r/4),t.lineTo(3*-r/4,3*r/4),t.lineTo(-r/4,3*r/4),t.closePath()}},j={props:{data:{default:function(){}},config:{default:function(){return function(){}}}},computed:{properties:function(){return{generator:this.generator,data:this.data,config:this.config}}},mounted:function(){this.updateDefer(),window.addEventListener("resize",this.updateDefer),this.watcher()},methods:{watcher:function(){var t=function(){e(),this.update(),this.watcher()},e=this.$watch("properties",t,{deep:!0})},update:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=this.data;this.config(this.generator);var n=e.select(this.$el),a=t.skipTransition?n:n.transition().duration(500);n.datum(r),a.call(this.generator)},updateNow:function(){var t=this;setTimeout(function(){t.update({skipTransition:!0})},0)},updateDefer:function(){setTimeout(this.updateNow,0)}}},$={mixins:[j],template:'<div class = "d2b-vue-container d2b-vue-axis-chart"></div>',props:{generator:{default:function(){return L()}}}},H={mixins:[j],template:'<div class = "d2b-vue-container d2b-vue-pie-chart"></div>',props:{generator:{default:function(){return T()}}}},J={mixins:[j],template:'<div class = "d2b-vue-container d2b-vue-sunburst-chart"></div>',props:{generator:{default:function(){return Y()}}}};t.textWrap=a,t.textWrapPX=o,t.tweenArc=l,t.tweenNumber=d,t.tweenCentroid=u,t.tooltip=p,t.tooltipAxis=h,t.stack=f,t.breadcrumbs=g,t.legend=v,t.chartFrame=m,t.defaultColor=N,t.id=X,t.color=N,t.omit=i,t.mean=y,t.median=x,t.mode=P,t.range=k,t.midpoint=w,t.toDegrees=F,t.toRadians=_,t.modelBase=s,t.symbolMars=V,t.symbolVenus=q,t.point=A,t.svgLegend=z,t.svgPie=M,t.svgLine=E,t.svgArea=B,t.svgScatter=G,t.svgBar=R,t.svgBubblePack=S,t.svgSunburst=C,t.plane=O,t.chartPie=T,t.chartAxis=L,t.chartSunburst=Y,t.vueGenMixin=j,t.vueChartAxis=$,t.vueChartPie=H,t.vueChartSunburst=J}(this.d2b=this.d2b||{},d3);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,