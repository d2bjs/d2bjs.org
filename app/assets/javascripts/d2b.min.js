!function(t,e){"use strict";function n(t,e){if("undefined"==typeof document)return e;t=t||"";var n=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");return r.type="text/css",r.styleSheet?r.styleSheet.cssText=t:r.appendChild(document.createTextNode(t)),n.appendChild(r),e}function r(t){return"function"==typeof t?t:function(){return t}}function a(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t){return t.label},a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1/0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"start";n=r(n),t.each(function(t,r){var i=e.select(this),l=(""+n.call(this,t,r)).split(/\s+/).reverse(),c=void 0,d=[],u=[l.pop()],s=1.1,p=+i.attr("x"),b=+i.attr("y"),h=parseFloat(i.attr("dy"))||0;for((i.html()||"").indexOf("tspan")===-1&&i.text(""),c=l.pop();c;)u.join(" ").length+c.length>a&&(d.push(u),u=[]),u.push(c),c=l.pop();d.push(u);var f=i.selectAll("tspan").data(d),g=(d.length-1)*s,m="end"===o?g:"middle"===o?g/2:0;f.merge(f.enter().append("tspan")).text(function(t){return t.join(" ")}).attr("x",p).attr("y",b).attr("dy",function(t,e){return h+e*s-m+"em"})})}function o(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;t.each(function(){var t=e.select(this),r=t.text().split(/\s+/).reverse(),a=void 0,o=[],i=0,l=1.1,c=parseFloat(t.attr("y"))||0,d=parseFloat(t.attr("dy"))||0,u=t.text(null).append("tspan").attr("x",0).attr("y",c).attr("dy",d+"em");for(a=r.pop();a;)o.push(a),u.text(o.join(" ")),u.node().getComputedTextLength()>n&&(o.pop(),u.text(o.join(" ")),o=[a],u=t.append("tspan").attr("x",0).attr("y",c).attr("dy",++i*l+d+"em").text(a)),a=r.pop()})}function i(t,e){var n={};for(var r in t)"function"!=typeof t[r]&&e.indexOf(r)<0&&(n[r]=t[r]);return n}function l(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{omit:["data"]};return t.selection?void t.attrTween("d",function(t){var a=this;t=i(t,r.omit),this.current=this.current||t;var o=e.interpolate(this.current,t);return function(t){return a.current=o(t),n(a.current)}}):t.attr("d",function(t){return this.current=i(t,r.omit),n(t)})}function c(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return isNaN(t)||null===t?e:t}function d(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t){return t},a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(t){return t};return n=r(n),t.selection?void t.tween("text",function(t,r){var o=this,i=c(n.call(this,t,r));this.current=c(this.current,i);var l=e.interpolate(this.current,i);return function(t){o.textContent=a(o.current=l(t))}}):t.text(function(t,e){return this.current=c(n.call(this,t,e)),a(this.current)})}function u(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{omit:["data"]};return t.selection?void t.attrTween("transform",function(t){var a=this;t=i(t,r.omit),this.current=this.current||t;var o=e.interpolate(this.current,t);return function(t){return a.current=o(t),"translate("+n.centroid(a.current)+") "+("rotate("+(a.current.rotate||0)+")")}}):t.attr("transform",function(t){return this.current=i(t,r.omit),"translate("+n.centroid(this.current)+")"})}function s(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=this,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments[2],i=function(e,n){return function(r){if(!arguments.length)return a[e];var o=a[e];return a[e]=r,n&&n(r,o),t}},l=function(t){return function(){return a[t]}},c=function(e,n){return function(o){if(!arguments.length)return a[e];var i=a[e];return a[e]=r(o),n&&n(a[e],i),t}},d=function(e,n){return function(o){if(!arguments.length)return a[e];var i=a[e];return o&&o.domain?a[e]=function(){return o}:a[e]=r(o),n&&n(a[e],i),t}},u={base:function(){return t},values:function(){return a},removeProp:function(e){return o.indexOf(e)!==-1?u:(a[e]=null,t[e]=null,u)},addProp:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i(e),o=arguments[3];return a[e]||t[e]?u:(r=r||i(e,o),r(n),t[e]=r,u)},addPropGet:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l(e);return a[e]||t[e]?u:(a[e]=n,t[e]=r,u)},addMethod:function(e,n){return t[e]?u:(t[e]=n,u)},addPropFunctor:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c(e),o=arguments[3];return a[e]||t[e]?u:(r=r||c(e,o),r(n),t[e]=r,u)},addScaleFunctor:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:d(t),r=arguments[3];return u.addProp(t,e,n,r)},addDispatcher:function(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"on",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"dispatch";return t[o]?u:a[i]?u:(t[o]=function(e,n){return 0===arguments.length?a[i]:1===arguments.length?a[i].on(e):(a[i].on(e,n),t)},a[i]=e.dispatch.apply(n,r),u)}};return u}function p(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:X(),n={},r=function t(e){return(e.selection?e.selection():e).on(c("mouseover"),o).on(c("mouseout"),l).on(c("mousemove"),i),t},a=function(t,r){var a=this.getBoundingClientRect(),o={},i=(n.at.call(this,t,r)||(e.event.clientX>window.innerWidth/2?"center left":"center right")).split(" ");switch(i={x:i[1],y:i[0]},i.x){case"left":o.x=a.left;break;case"center":o.x=a.left+a.width/2;break;default:o.x=a.left+a.width}switch(i.y){case"bottom":o.y=a.top+a.height;break;case"center":o.y=a.top+a.height/2;break;default:o.y=a.top}return o},o=function(t,e){var r=n.selection.selectAll(".d2b-tooltip").data(function(t){return[t]}),a=r.enter().append("div").style("opacity",0).attr("class","d2b-tooltip");a.append("div").attr("class","d2b-tooltip-content"),r=r.merge(a),r.transition().duration(100).style("opacity",1),n.dispatch.call("insert",r,this,t,e)},i=function(t,r){var o=n.html.call(this,t,r),i=n.target.call(this,t,r),l=n.color.call(this,t,r),c=i?i.node():this,d=n.followMouse.call(this,t,r)?{x:e.event.clientX,y:e.event.clientY}:a.call(c,t,r),u=n.selection.selectAll(".d2b-tooltip").data(function(t){return[t]}),s=n.my.call(this,t,r)||(e.event.clientX>window.innerWidth/2?"left":"right");u.attr("class","d2b-tooltip d2b-tooltip-"+s).style("top",d.y+"px").style("left",d.x+"px").style("border-color",l).select(".d2b-tooltip-content").html(o),n.dispatch.call("move",u,this,t,r)},l=function(t,e){var r=n.selection.selectAll(".d2b-tooltip").data(function(t){return[t]});r.transition().duration(100).style("opacity",0).remove(),n.dispatch.call("remove",r,this,t,e)},c=function(t){return t+".d2b-tooltip"},d=function(e,a){a&&a.select(".d2b-tooltip-area-"+t).remove(),e&&(n.selection=e.selectAll(".d2b-tooltip-area-"+t).data([r]),n.selection=n.selection.merge(n.selection.enter().append("div").attr("class","d2b-tooltip-area-"+t+" d2b-tooltip-area")))};return s(r,n).addProp("container",e.select("body"),null,d).addMethod("clear",function(t){return(t.selection?t.selection():t).on(c("mouseover"),null).on(c("mouseout"),null).on(c("mousemove"),null),r}).addPropFunctor("followMouse",!1).addPropFunctor("color",null).addPropFunctor("my",null).addPropFunctor("at",null).addPropFunctor("target",null).addPropFunctor("html",null).addDispatcher(["insert","move","remove"]),r}function b(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0];return e.forEach(function(t){null!==r&&void 0!==r&&r!==!1||(r=t)}),r}function h(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:X(),n={},r={},a=function(t,e,r){if("y"===r){if(e.y===1/0)return t.style("opacity",0);t.style("opacity",1).attr("transform","translate(0, "+e.y+")").attr("y1",0).attr("y2",0).attr("x1",0).attr("x2",n.size.width)}else{if(e.x===1/0)return t.style("opacity",0);t.style("opacity",1).attr("transform","translate("+e.x+", 0)").attr("x1",0).attr("x2",0).attr("y1",0).attr("y2",n.size.height)}},o=function(t,r,a){var o=t.node();if(o){var i=t.node().getBoundingClientRect(),l=a.x,c=a.y,d=10;n.trackY?c+=r.y>n.size.height/2?r.y-d-i.height:r.y+d:c=e.event.clientY-a.y>n.size.height/2?e.event.clientY-d-i.height:e.event.clientY+d,n.trackX?l+=r.x>n.size.width/2?r.x-d-i.width:r.x+d:l=e.event.clientX-a.x>n.size.width/2?e.event.clientX-d-i.width:e.event.clientX+d,l+=window.pageXOffset,c+=window.pageYOffset,t.style("left",l+"px").style("top",c+"px")}},i=function(t,e){var r=n.title(e.points.map(function(t){return t.data}));t.select(".d2b-tooltip-title").style("display",r?"block":"none").html(r);var a=t.select(".d2b-tooltip-content"),o=a.selectAll(".d2b-tooltip-row").data(e.points),i=o.enter().append("div").attr("class","d2b-tooltip-row");o.exit().remove(),o=o.merge(i).html(function(t){return t.row}).style("border-left-color",function(t){return t.color||"transparent"})},l=function(t){var r={x:e.event.clientX-t.x,y:e.event.clientY-t.y},a=1/0,o=1/0,i=[];for(var l in x)if(x.hasOwnProperty(l)){var c=x[l],d=function(t){if(!c.hasOwnProperty(t))return"continue";var e=c[t],l=[];e.config.data.forEach(function(t,c){var d={data:t,x:b(e.config.x(t,c),n.x(t,c)),y:b(e.config.y(t,c),n.y(t,c)),color:b(e.config.color(t,c),n.color(t,c)),row:b(e.config.row(t,c),n.row(t,c))};if(n.trackX&&n.trackY){if(d.x===a&&d.y===o)return l.push(d);var u=Math.sqrt(Math.pow(a-r.x,2)+Math.pow(o-r.y,2)),s=Math.sqrt(Math.pow(d.x-r.x,2)+Math.pow(d.y-r.y,2));s<u&&s<n.threshold&&(a=d.x,o=d.y,i=[],l=[d])}else if(n.trackX){if(d.x===a)return l.push(d);var p=Math.abs(a-r.x),h=Math.abs(d.x-r.x);h<p&&h<n.threshold&&(a=d.x,i=[],l=[d])}else if(n.trackY){if(d.y===o)return l.push(d);var f=Math.abs(o-r.y),g=Math.abs(d.y-r.y);g<f&&g<n.threshold&&(o=d.y,i=[],l=[d])}}),i=i.concat(l)};for(var u in c){d(u)}}return i=i.sort(function(t,n){return e.ascending(t.x,n.x)||e.ascending(t.y,n.y)}),{x:a,y:o,points:i}},c=function(t){t.transition().duration(50).style("opacity",0).remove()},d=function(t){t.transition().duration(50).style("opacity",1)},u=function(){var t=n.selectionSvg.selectAll(".d2b-tooltip-marker-x").data(n.trackX?[r]:[]),e=t.enter().append("line").attr("class","d2b-tooltip-marker-x d2b-tooltip-marker"),a=n.selectionSvg.selectAll(".d2b-tooltip-marker-y").data(n.trackY?[r]:[]),o=a.enter().append("line").attr("class","d2b-tooltip-marker-y d2b-tooltip-marker"),i=n.selection.selectAll(".d2b-tooltip").data([r]),l=i.enter().append("div").attr("class","d2b-tooltip");l.merge(i).call(d),a.merge(o).call(d),t.merge(e).call(d),l.append("div").attr("class","d2b-tooltip-title"),l.append("div").attr("class","d2b-tooltip-content")},p=function(){n.selectionSvg.selectAll(".d2b-tooltip-marker-x").data([]).exit().call(c),n.selectionSvg.selectAll(".d2b-tooltip-marker-y").data([]).exit().call(c),n.selection.selectAll(".d2b-tooltip").data([]).exit().call(c)},h=function(t,e){var r=n.selectionSvg.selectAll(".d2b-tooltip-base").data([t]);r=r.merge(r.enter().append("rect").attr("class","d2b-tooltip-base"));var c=r.node().getBoundingClientRect();c={x:c.left,y:c.top};var d=l(c);return d.points.length?(u(),n.selectionSvg.select(".d2b-tooltip-marker-x").call(a,d,"x"),n.selectionSvg.select(".d2b-tooltip-marker-y").call(a,d,"y"),n.selection.select(".d2b-tooltip").call(i,d).call(o,d,c),void n.dispatch.call("move",n.tooltip,this,t,e)):p()},f=function(){p()},g=function(t){return t+".d2b-tooltip-axis"},m=function(e,a){a&&a.select("div.d2b-tooltip-axis-area-"+t).remove(),e&&(n.selection=e.selectAll("div.d2b-tooltip-axis-area-"+t).data([r]),n.selection=n.selection.merge(n.selection.enter().append("div").attr("class","d2b-tooltip-axis-area-"+t+" d2b-tooltip-axis-area")))},y=function(e,a){a&&a.select("g.d2b-tooltip-axis-area-"+t).remove(),e&&(n.selectionSvg=e.selectAll("g.d2b-tooltip-axis-area-"+t).data([r]),n.selectionSvg=n.selectionSvg.merge(n.selectionSvg.enter().append("g").attr("class","d2b-tooltip-axis-area-"+t+" d2b-tooltip-axis-area")))},v=function(t,e){e&&e.on(g("mouseout"),null).on(g("mousemove"),null),t&&t.on(g("mouseout"),f).on(g("mousemove"),h)};s(r,n).addProp("htmlContainer",e.select("body"),null,m).addProp("svgContainer",null,null,y).addProp("tracker",e.select("body"),null,v).addProp("size",{height:0,width:0}).addProp("trackX",!0).addProp("trackY",!1).addProp("threshold",1/0).addMethod("clear",function(t,e){return 0===arguments.length?x={}:1===arguments.length?delete x[t]:arguments.length>=2&&delete x[t][e],r}).addPropFunctor("title",null).addPropFunctor("x",function(t){return t.x}).addPropFunctor("y",function(t){return t.y}).addPropFunctor("color",null).addPropFunctor("row",null).addDispatcher(["insert","move","remove"]);var x={};return r.graph=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=x[t]=x[t]||{},r=n[e];if(!r){r=n[e]={interface:{},config:{}};var a=s(r.interface,r.config);a.addProp("data",[]).addMethod("clear",function(){return r.config.data=[],r.interface}).addMethod("addPoint",function(t){return r.config.data.push(t),r.interface}).addPropFunctor("x",null).addPropFunctor("y",null).addPropFunctor("color",null).addPropFunctor("row",null)}return r.interface},r}function f(){var t={},n=function(n){var r=this,a=n;n=n.map(t.values);var o=[],i=n.map(function(e){var n={};return e.forEach(function(e,a){var i=t.x.call(r,e,a);o.push(i),n[i]=t.y.call(r,e,a)}),n});o=e.set(o).values();var l=o.reduce(function(t,e,n){return t[e]=n,t},{}),c=e.range(0,n.length),d=o.map(function(t){return i.map(function(e){return e[t]||0})});t.stack.keys(c).value(function(t,e){return t[e]||0});var u=t.stack(d);return n.forEach(function(e,n){e.forEach(function(e,a){var o=t.x.call(r,e,a),i=u[n][l[o]];t.out.call(r,e,i[0],i[1],o)})}),a};return s(n,t).addProp("stack",e.stack()).addPropFunctor("values",function(t){return t}).addPropFunctor("x",function(t){return t.x}).addPropFunctor("y",function(t){return t.y}).addPropFunctor("out",function(t,e,n){t.y0=e,t.y1=n}),n}function g(){var t={},e=function(e){var n=e.selection?e.selection():e,r=n.selectAll(".d2b-breadcrumbs").data(function(t){return[t]}),a=r.enter().append("div").attr("class","d2b-breadcrumbs");r=r.merge(a).classed("d2b-vertical",t.vertical);var o=r.selectAll(".d2b-breadcrumb").data(t.values,t.key),i=o.exit(),l=o.enter().append("div").attr("class","d2b-breadcrumb").style("opacity",0);l.append("div").attr("class","d2b-breadcrumb-icon"),l.append("div").attr("class","d2b-breadcrumb-content"),o=o.merge(l).order(),o.select(".d2b-breadcrumb-content").html(t.html),e!==n&&(o=o.transition(e),i=i.transition(e).style("opacity",0)),o.style("border-color",t.color).style("opacity",1).select(".d2b-breadcrumb-icon").style("background-color",t.color),i.remove()};return s(e,t).addPropFunctor("values",function(t){return t}).addPropFunctor("key",function(t,e){return e}).addPropFunctor("color","blue").addPropFunctor("html",function(t){return t.html}).addPropFunctor("vertical",!0),e}function m(){var t={},n=e.symbol().size(80),r=function r(a){var o=a.selection?a.selection():a,i=o.selectAll(".d2b-legend").data(function(t){return[t]}),l=i.enter().append("div").attr("class","d2b-legend");i=i.merge(l).classed("d2b-vertical",t.vertical);var c=i.selectAll(".d2b-legend-item").data(t.values,t.key),d=c.exit(),u=c.enter().append("div").attr("class","d2b-legend-item").style("opacity",0);u.append("div").attr("class","d2b-legend-icon"),u.append("div").attr("class","d2b-legend-content"),c=c.merge(u).order(),c.select(".d2b-legend-content").html(t.html),a!==o&&(c=c.transition(a),d=d.transition(a).style("opacity",0)),c.style("opacity",1).each(function(r,a){var o=e.select(this),i=t.color(r,a),l=t.empty(r,a);o.style("border-color",i);var c=t.icon(r,a),d=o.select(".d2b-legend-icon"),u=[],s=[],p=d.node().getBoundingClientRect(),b={width:p.width,height:p.height},h={x:b.width/2,y:b.height/2};"string"==typeof c?u.push(c):s.push(c);var f=d.selectAll(".d2b-legend-svg-icon").data(function(t){return[t]}),g=f.enter().append("svg");g.attr("class","d2b-legend-svg-icon").attr("width",b.width).attr("height",b.height),f=f.merge(g);var m=f.selectAll("text").data(u);m.exit().remove(),m=m.merge(m.enter().append("text")),m.text(function(t){return t}).style("stroke",i).style("fill",l?"white":i).attr("transform","translate("+h.x+","+h.y+")");var y=f.selectAll("path").data(s);y.exit().remove(),y=y.merge(y.enter().append("path")),y.style("stroke",i).style("fill",l?"white":i).attr("d",function(t){return n.type(t)()}).attr("transform","translate("+h.x+","+h.y+")")}),i.each(function(n,a){var i=t.allowEmptied(n,a),l=e.select(this).selectAll(".d2b-legend-item"),c=function(e){l.each(function(n,r){t.setEmpty(n,r,e)})},d=function e(){var e=!0;return l.each(function(n,r){t.empty(n,r)||(e=!1)}),e},u=function(n,a){t.setEmpty(n,a,!t.empty(n,a)),!i&&d()&&c(!1),o.call(r),e.select(this.parentNode).dispatch("change",{bubbles:!0})},s=function(n,a){c(!0),t.setEmpty(n,a,!1),o.call(r),e.select(this.parentNode).dispatch("change",{bubbles:!0})};l.each(function(n,r){var a=t.clickable(n,r),o=t.dblclickable(n,r);e.select(this).on("click",a?u:null).on("dblclick",o?s:null)})}),d.remove()};return s(r,t).addPropFunctor("values",function(t){return t}).addPropFunctor("key",function(t,e){return e}).addPropFunctor("color",function(t){return Y(t.html)}).addPropFunctor("html",function(t){return t.html}).addPropFunctor("icon","").addPropFunctor("vertical",!1).addPropFunctor("allowEmptied",!1).addPropFunctor("clickable",!1).addPropFunctor("dblclickable",!1).addPropFunctor("empty",function(t){return t.empty}).addPropFunctor("setEmpty",function(t,e,n){return t.empty=n}),r}function y(){function t(t){var e={top:0,left:0,right:0,bottom:0};return"number"==typeof t?{top:t,left:t,right:t,bottom:t}:(["top","bottm","right","left"].forEach(function(n){t[n]&&e[n]==t[n]}),e)}function n(t,e){return{width:t&&t.width>0?t.width:e.width,height:t&&t.height>0?t.height:e.height}}function r(t,e,n){n(t),n(e)}function a(t,e,n,a,o,i){var l=t.node();if(l){n.style("top","").style("left","").style("right","").style("bottom","").style("width","").style("height","");var c=void 0;"right"===a||"left"===a?(t.classed("d2b-vertical",!0),c=l.getBoundingClientRect(),r(e,n,function(t){t.style(a,o[a]+"px").style("top",o.top+"px").style("height",i.height+"px")}),o[a]+=c.width,i.width-=c.width):"top"===a||"bottom"===a?(t.classed("d2b-vertical",!1),c=l.getBoundingClientRect(),r(e,n,function(t){t.style(a,o[a]+"px").style("left",o.left+"px").style("width",i.width+"px")}),o[a]+=c.height,i.height-=c.height):t.classed("d2b-vertical",!1)}}var o={},i=function i(l){var c=l.selection?l.selection():l,d=c.selectAll(".d2b-chart-frame").data(function(t){return[t]}),u=d.enter().append("div").attr("class","d2b-chart-frame");return d=d.merge(u),c.each(function(i){var d=e.select(this).select(".d2b-chart-frame"),u=d,s=t(o.padding(i)),p=t(o.chartPadding(i)),b=n(o.size(i),this.getBoundingClientRect());r(d,u,function(t){t.style("width",b.width+"px").style("height",b.height+"px")}),b.width-=s.left+s.right,b.height-=s.top+s.bottom;var h=o.legendEnabled(i)?[i]:[],f=d.selectAll(".d2b-legend-frame").data(h),g=f.enter().append("div").attr("class","d2b-legend-frame"),m=f.exit();m.remove(),g.append("div").attr("class","d2b-legend-container"),f=f.merge(g);var y=f,v=o.breadcrumbsEnabled(i)?[i]:[],x=d.selectAll(".d2b-breadcrumbs-frame").data(v),P=x.enter().append("div").attr("class","d2b-breadcrumbs-frame"),k=x.exit();k.remove(),P.append("div").attr("class","d2b-breadcrumbs-container"),x=x.merge(P);var w=x,F=d.selectAll(".d2b-chart").data(function(t){return[t]}),A=F.enter().append("svg").attr("class","d2b-chart");A.append("g").attr("class","d2b-chart-container"),F=F.merge(A);var _=F;l!==c&&(u=u.transition(l),y=y.transition(l),w=w.transition(l),_=_.transition(l)),a(x,P,w,o.breadcrumbsOrient(i),s,b),a(f,g,y,o.legendOrient(i),s,b),r(A,_,function(t){t.style("left",s.left+"px").style("top",s.top+"px").style("width",b.width+"px").style("height",b.height+"px"),t.select(".d2b-chart-container").attr("transform","translate("+[p.left,p.top]+")")}),b.width-=p.left+p.right,b.height-=p.top+p.bottom,F.select(".d2b-chart-container").node().__size__=b}),i};return s(i,o).addPropFunctor("size",null).addPropFunctor("legendEnabled",!0).addPropFunctor("legendOrient","bottom").addPropFunctor("breadcrumbsEnabled",!1).addPropFunctor("breadcrumbsOrient","right").addPropFunctor("chartPadding",10).addPropFunctor("padding",10),i}function v(t,e,n){var a=0,o=0;if(n=r(n||1),e=r(e||function(t){return t}),t.filter(function(t){return!isNaN(U(n(t)))&&!isNaN(U(e(t)))}).forEach(function(t){var r=n(t),i=e(t);a+=r,o+=i*r}),t.length&&a)return o/a}function x(t,n,a){a=r(a||1),n=r(n||function(t){return t});var o,i=[],l=t.filter(function(t){return 0!==a(t)&&!isNaN(U(a(t)))&&!isNaN(U(n(t)))}).sort(function(t,r){return e.ascending(n(t),n(r))});o=Math.round(e.sum(l,function(t){return a(t)})/2*1e12)/1e12;var c=0,d=!1;if(l.forEach(function(t){d&&(i.push(n(t)),d=!1),c+=a(t),c===o&&(i.push(n(t)),d=!0),c>o&&0===i.length&&i.push(n(t))}),t.length)return v(i)}function P(t,e,n){n=r(n||1),e=r(e||function(t){return t});var a=[],o=0,i={};if(t.forEach(function(t){var r=U(e(t));isNaN(e(t))||(i[r]=i[r]||0,i[r]+=n(t),i[r]>o?(o=i[e(t)],a=[e(t)]):i[e(t)]==o&&a.push(e(t)))}),t.length)return v(a)}function k(t,n){n=r(n||function(t){return t});var a=e.extent(t,n);if(t.length)return a[1]-a[0]}function w(t,n){if(n=r(n||function(t){return t}),t.length)return e.mean(e.extent(t,n))}function F(t){return t*(180/Math.PI)}function A(t){return t*(Math.PI/180)}function _(){function t(t,e){return l.empty.call(this,t,e)?0:1}function n(t,e){var n=l.size.call(this,t,e),r=l.empty.call(this,t,e);return d.size(r?n:2.5*n).call(this,t,e)}function r(t,e){var n=l.size.call(this,t,e),r=l.empty.call(this,t,e);return d.size(r?n/3:n).call(this,t,e)}function a(t,e){var n=l.size.call(this,t,e);return d.size(n).call(this,t,e)}function o(t,a){var o=l.empty.call(this,t,a);e.select(this).select("path.d2b-point-back").transition().duration(100).attr("d",n),e.select(this).select("path.d2b-point-front").transition().duration(100).style("opacity",o?.5:1).attr("d",r)}function i(t,n){var o=l.empty.call(this,t,n);e.select(this).select("path.d2b-point-back").transition().duration(100).attr("d",a),e.select(this).select("path.d2b-point-front").transition().duration(100).style("opacity",o?0:1).attr("d",r)}var l={},c=function n(c){var d=c.selection?c.selection():c,u=d.selectAll("path.d2b-point-back").data(function(t){return[t]});u.enter().append("path").attr("class","d2b-point-back").attr("d",a).style("fill-opacity",0).style("stroke",l.stroke).style("stroke-width",l.strokeWidth),c!==d&&(u=u.transition(c)),u.attr("d",a).style("stroke",l.stroke).style("stroke-width",l.strokeWidth);var s=d.selectAll("path.d2b-point-front").data(function(t){return[t]});return s.enter().append("path").attr("class","d2b-point-front").attr("d",r).style("opacity",t).style("fill",l.fill).style("stroke",l.stroke).style("stroke-width",l.strokeWidth),c!==d&&(s=s.transition(c)),s.attr("d",r).style("opacity",t).style("fill",l.fill).style("stroke",l.stroke).style("stroke-width",l.strokeWidth),d.each(function(t,n){var r=l.active.call(this,t,n);e.select(this).on("mouseover.d2b-point",r?o:null).on("mouseout.d2b-point",r?i:null)}),n},d=e.symbol();return s(c,l).addPropFunctor("size",150,null,function(t){return d.size(t)}).addPropFunctor("type",e.symbolCircle,null,function(t){return d.type(t)}).addPropFunctor("active",!1).addPropFunctor("empty",!1).addPropFunctor("fill","steelblue").addPropFunctor("stroke",function(t,n){return e.rgb(l.fill.call(this,t,n)).darker(.3)}).addPropFunctor("strokeWidth","1px"),c}function z(){function t(t,e){t.selectAll(".d2b-legend-item").on("click",function(r,a){n.call(this,r,a,t,e)}).on("dblclick",function(n,a){r.call(this,n,a,t,e)})}function n(t,n,r,a){var o=i.clickable.call(this,t,n),l=i.allowEmptied.call(r.node(),r.datum(),a);if(o){i.setEmpty(t,n,!i.empty(t,n));var d=e.select(this),u=r.selectAll(".d2b-legend-item"),s=!0;u.each(function(t,e){return s=!!i.empty(t,e)&&s}),s&&!l?(u.each(function(t,e){return i.setEmpty(t,e,!1)}).transition().duration(100).call(c),u.filter(function(e){return e!=t}).dispatch("change")):d.transition().duration(100).call(c),d.dispatch("change",{bubbles:!0})}}function r(t,n,r){var a=i.dblclickable.call(this,t,n);if(a){var o=r.selectAll(".d2b-legend-item");o.each(function(t,e){return i.setEmpty(t,e,!0)}),i.setEmpty(t,n,!1),o.transition().duration(100).call(c),o.filter(function(e){return e!=t}).dispatch("change"),e.select(this).dispatch("change",{bubbles:!0})}}function o(t,e,n,r){var a=0,o=0;switch(r[1]){case"center":case"middle":o=n.height/2-e.height/2;break;case"bottom":o=n.height-e.height;break;case"top":default:o=0}switch(r[2]){case"center":case"middle":a=n.width/2-e.width/2;break;case"right":a=n.width-e.width;break;case"left":default:a=0}e.left=a,e.right=n.width-a+e.width,e.top=o,e.bottom=n.height-o+e.height,t.attr("transform","translate("+a+", "+o+")")}var i={},l=function n(r){return r.each(function(n,l){var u=e.select(this),s=i.itemSize.call(this,n,l),p=i.size.call(this,n,l),b=i.orient.call(this,n,l).split(" "),h=b[0],f=i.maxTextLength.call(this,n,l),g=i.items.call(this,n,l);c.size(1.5*Math.pow(s/2,2)).strokeWidth(.1*s);var m=u.selectAll(".d2b-legend").data([g]),y=m.enter().append("g").attr("class","d2b-legend");m=m.merge(y);var v=m.selectAll(".d2b-legend-item").data(function(t){return t.sort(i.order)},i.key),x=v.enter().append("g").attr("class","d2b-legend-item").style("opacity",0);x.append("g").append("text");var P=v.exit();v=v.merge(x).style("cursor",function(t,e){var n=i.clickable.call(this,t,e),r=i.dblclickable.call(this,t,e);return n||r?"pointer":"auto"}),u.call(t,l);var k=v.select("g").attr("transform","translate("+s/2+", "+s/2+")"),w=v.select("text").attr("transform","translate("+s/1.5+", "+s/3+")").style("font-size",s+"px").call(a,i.label,f);r.selection&&(P=P.transition(r).style("opacity",0),v=v.transition(r),k=k.transition(r),w=w.transition(r),m=m.transition(r)),P.remove(),k.call(c);var F=0;w.each(function(){F=Math.max(F,this.getBBox().width)}),F+=s;var A={x:s,y:5};x.call(d[h],{},A,s,p,F),this.__box__={width:0,height:0,top:0,left:0,right:0,bottom:0},v.style("opacity",1).call(d[h],this.__box__,A,s,p,F),y.call(o,this.__box__,p,b),m.call(o,this.__box__,p,b)}),n},c=_(),d={horizontal:function(t,n,r,a,o,i){var l=0,c=0,d=0;t.attr("transform",function(){var t=e.select(this),u=a*t.selectAll("tspan").size(),s=t.select("text").node().getBBox().width;l+i>o.width&&(l=0,c+=d+r.y,d=0);var p="translate("+l+", "+c+")";return d=Math.max(d,u),n.width=Math.max(n.width,l+s+1.5*a),l+=i+r.x,p}),n.height=c+d},vertical:function(t,n,r,a,o){var i=0,l=0,c=0;t.attr("transform",function(){var t=e.select(this),d=a*t.selectAll("tspan").size(),u=t.select("text").node().getBBox().width;l+d>o.height&&(i+=c+r.x+a,l=0,c=0);var s="translate("+i+", "+l+")";return c=Math.max(c,u),n.height=Math.max(n.height,l+d),l+=d+r.y,s}),n.width=i+c+1.5*a}};return s(l,i).addPropFunctor("items",function(t){return t}).addPropFunctor("itemSize",12).addPropFunctor("size",{width:960,height:500}).addPropFunctor("orient","vertical center right").addPropFunctor("maxTextLength",1/0).addPropFunctor("allowEmptied",!1).addPropFunctor("order",function(t,n){return e.ascending(i.label(t),i.label(n))}).addPropFunctor("key",function(t,e){return e}).addPropFunctor("clickable",!1).addPropFunctor("dblclickable",!1).addPropFunctor("label",function(t){return t.label}).addPropFunctor("empty",function(t){return t.empty},null,function(t){return c.empty(t)}).addPropFunctor("setEmpty",function(t,e,n){t.empty=n}).addPropFunctor("active",!1,null,function(t){return c.active(t)}).addPropFunctor("symbol",e.symbolCircle,null,function(t){return c.type(t)}).addPropFunctor("color",function(t){return Y(t.label)},null,function(t){return c.fill(t)}).addMethod("box",function(t){var e=t.node?t.node():t;return e?e.__box__:null}),l}function M(){function t(t,e,a){var o=n(t,e,a),i=r(t,e,a);return o?{startAngle:o.endAngle,endAngle:o.endAngle}:i?{startAngle:i.startAngle,endAngle:i.startAngle}:{startAngle:0,endAngle:0}}function n(t,e,n){for(var r=e.length;--t>=0;)for(var o=a.key(n[t].data,t),i=0;i<r;++i)if(a.key(e[i].data,i)===o)return e[i]}function r(t,e,n){for(var r=n.length,o=e.length;++t<r;)for(var i=a.key(n[t].data,t),l=0;l<o;++l)if(a.key(e[l].data,l)===i)return e[l]}var a={},o=function n(r){var o=r.selection?r.selection():r;return o.each(function(){var n=e.select(this),i=n.selectAll(".d2b-pie-arc"),c=i.data();i=i.data(a.values,function(t,e){return a.key(t.data,e)});var d=i.enter().append("g").attr("class","d2b-pie-arc"),u=i.exit(),s=i.merge(d).order();d.append("path").attr("fill",function(t,e){return a.color.call(this,t.data,e)});var p=s.data();d.select("path").each(function(e,n){this.current=t(n,c,p)}),u.datum(function(e,n){var r=t(n,p,c);return r.data=e.data,r.innerRadius=e.innerRadius,r.outerRadius=e.outerRadius,r}),r!==o&&(u=u.transition(r),s=s.transition(r)),s.select("path").call(l,a.arc).attr("fill",function(t,e){return a.color.call(this,t.data,e)}),u.remove().select("path").call(l,a.arc)}),n};return s(o,a).addProp("key",function(t){return t.label}).addProp("arc",e.arc().innerRadius(100).outerRadius(200)).addPropFunctor("values",function(t){return t}).addPropFunctor("color",function(t){return Y(t.label)}),o}function E(){function t(t,e){var r=n.graphs(t,e).map(function(t,e){var r={data:t,index:e,x:n.x(t,e),y:n.y(t,e),tooltipGraph:n.tooltipGraph(t,e),shift:n.shift(t,e),stackBy:n.stackBy(t,e),key:n.key(t,e),color:n.color(t,e)};return r.values=n.values(t,e).map(function(t,e){return{data:t,index:e,graph:r,x:n.px(t,e),y:n.py(t,e)}}),r});return o.entries(r).forEach(function(t){return a(t.values)}),r}var n={},r=function e(r){var a=r.selection?r.selection():r,o=a.selectAll(".d2b-line-graph").data(function(e,n){return t(e,n)},function(t){return t.key}),i=o.enter().append("g").attr("class","d2b-line-graph d2b-graph").style("opacity",0);i.append("path").attr("class","d2b-line");var l=o.merge(i).order(),c=o.exit(),d=l.select(".d2b-line");return r!==a&&(l=l.transition(r),c=c.transition(r),d=d.transition(r)),l.style("opacity",1),c.style("opacity",0).remove(),d.style("stroke",function(t){return t.color}).attr("d",function(t){var e=t.x,r=t.y,a=t.shift;return null===a&&(a=e.bandwidth?e.bandwidth()/2:0),t.tooltipGraph&&t.tooltipGraph.data(t.values).x(function(t){return e(t.x)+a}).y(function(t){return r(t.y1)}).color(t.color),n.line.x(function(t){return e(t.x)+a}).y(function(t){return r(t.y1)}),n.line(t.values)}),e},a=f().values(function(t){return t.values}).y(function(t){return t.y}).x(function(t){return t.x}),o=e.nest().key(function(t){var e=t.stackBy;return e!==!1&&null!==e?e:X()});return s(r,n).addProp("line",e.line()).addPropGet("type","line").addPropFunctor("graphs",function(t){return t}).addScaleFunctor("x",e.scaleLinear()).addScaleFunctor("y",e.scaleLinear()).addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("shift",null).addPropFunctor("stackBy",null).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values}).addPropFunctor("color",function(t){return Y(t.label)}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addMethod("getComputedGraphs",function(e){return(e.selection?e.selection():e).data().map(function(e,n){return t(e,n)})}).addMethod("getVisiblePoints",function(t){var e=r.getComputedGraphs(t);return e.map(function(t){return[].concat.apply([],t.map(function(t){return t.values.map(function(e){return{x:e.x,y:e.y1,graph:t}})}))})}),r}function B(){function t(t,e){var r=n.graphs(t,e).map(function(t,e){var r={data:t,index:e,x:n.x(t,e),y:n.y(t,e),tooltipGraph:n.tooltipGraph(t,e),shift:n.shift(t,e),stackBy:n.stackBy(t,e),key:n.key(t,e),color:n.color(t,e)};return r.values=n.values(t,e).map(function(t,e){return{data:t,index:e,graph:r,x:n.px(t,e),y:n.py(t,e)}}),r});return o.entries(r).forEach(function(t){return a(t.values);
}),r}var n={},r=function e(r){var a=r.selection?r.selection():r,o=a.selectAll(".d2b-area-graph").data(function(e,n){return t(e,n)},function(t){return t.key}),i=o.enter().append("g").attr("class","d2b-area-graph d2b-graph").style("opacity",0);i.append("path").attr("class","d2b-area");var l=o.merge(i).order(),c=o.exit(),d=l.select(".d2b-area");return r!==a&&(l=l.transition(r),c=c.transition(r),d=d.transition(r)),l.style("opacity",1),c.style("opacity",0).remove(),d.style("fill",function(t){return t.color}).attr("d",function(t){var e=t.x,r=t.y,a=t.shift;return null===a&&(a=e.bandwidth?e.bandwidth()/2:0),t.tooltipGraph&&t.tooltipGraph.data(t.values).x(function(t){return e(t.x)+a}).y(function(t){return r(t.y1)}).color(t.color),n.area.x(function(t){return e(t.x)+a}).y0(function(t){return r(t.y0)}).y1(function(t){return r(t.y1)}),n.area(t.values)}),e},a=f().values(function(t){return t.values}).y(function(t){return t.y}).x(function(t){return t.x}),o=e.nest().key(function(t){var e=t.stackBy;return e!==!1&&null!==e?e:X()});return s(r,n).addProp("area",e.area()).addPropGet("type","area").addPropFunctor("graphs",function(t){return t}).addScaleFunctor("x",e.scaleLinear()).addScaleFunctor("y",e.scaleLinear()).addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("shift",null).addPropFunctor("stackBy",null).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values}).addPropFunctor("color",function(t){return Y(t.label)}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addMethod("getComputedGraphs",function(e){return(e.selection?e.selection():e).data().map(function(e,n){return t(e,n)})}).addMethod("getVisiblePoints",function(t){var e=r.getComputedGraphs(t);return e.map(function(t){var e=[].concat.apply([],t.map(function(t){return t.values.map(function(e){return{x:e.x,y:e.y0,graph:t}})})),n=[].concat.apply([],t.map(function(t){return t.values.map(function(e){return{x:e.x,y:e.y1,graph:t}})}));return e.concat(n)})}),r}function G(){function t(t,e){var n=r.graphs(t,e).map(function(t,e){var n={data:t,index:e,x:r.x(t,e),y:r.y(t,e),tooltipGraph:r.tooltipGraph(t,e),shift:r.shift(t,e),stackBy:r.stackBy(t,e),key:r.key(t,e),color:r.color(t,e),symbol:r.symbol(t,e)};return n.values=r.values(t,e).map(function(t,e){return{data:t,index:e,graph:n,x:r.px(t,e),y:r.py(t,e),color:r.pcolor(t,e),symbol:r.psymbol(t,e),key:r.pkey(t,e),size:r.psize(t,e)}}),n});return i.entries(n).forEach(function(t){return o(t.values)}),n}function n(t,e,n,r){t.attr("transform",function(t){return"translate("+(e(t.x)+r)+", "+n(t.y1)+")"})}var r={},a=function a(o){var i=o.selection?o.selection():o,l=i.selectAll(".d2b-scatter-graph").data(function(e,n){return t(e,n)},function(t){return t.key}),c=l.enter().append("g").attr("class","d2b-scatter-graph d2b-graph").style("opacity",0),d=l.merge(c).order(),u=l.exit();return o!==i&&(d=d.transition(o),u=u.transition(o)),d.style("opacity",1),u.style("opacity",0).remove(),d.each(function(t){var a=e.select(this),l=t.x,c=t.y,d=t.shift;null===d&&(d=l.bandwidth?l.bandwidth()/2:0),t.tooltipGraph&&t.tooltipGraph.data(t.values).x(function(t){return l(t.x)+d}).y(function(t){return c(t.y)}).color(function(e){return e.color||t.color}),r.point.fill(function(e){return e.color||t.color}).type(function(e){return e.symbol||t.symbol}).size(function(t){return t.size});var u=a.selectAll(".d2b-scatter-point").data(t.values,function(t){return t.key}),s=u.enter().append("g").attr("class","d2b-scatter-point"),p=u.merge(s).order(),b=u.exit();o!==i&&(p=p.transition(o),b=b.transition(o)),s.style("opacity",0).call(n,l,c,d),p.style("opacity",1).call(r.point).call(n,l,c,d),b.style("opacity",0).remove()}),a},o=f().values(function(t){return t.values}).y(function(t){return t.y}).x(function(t){return t.x}),i=e.nest().key(function(t){var e=t.stackBy;return e!==!1&&null!==e?e:X()});return s(a,r).addProp("point",_().active(!0)).addPropGet("type","scatter").addPropFunctor("graphs",function(t){return t}).addScaleFunctor("x",e.scaleLinear()).addScaleFunctor("y",e.scaleLinear()).addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("shift",null).addPropFunctor("stackBy",null).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values}).addPropFunctor("color",function(t){return Y(t.label)}).addPropFunctor("symbol",function(){return e.symbolCircle}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addPropFunctor("pcolor",null).addPropFunctor("psymbol",null).addPropFunctor("pkey",function(t,e){return e}).addPropFunctor("psize",25).addMethod("getComputedGraphs",function(e){return(e.selection?e.selection():e).data().map(function(e,n){return t(e,n)})}).addMethod("getVisiblePoints",function(t){var e=a.getComputedGraphs(t);return e.map(function(t){return[].concat.apply([],t.map(function(t){return t.values.map(function(e){return{x:e.x,y:e.y1,graph:t}})}))})}),a}function R(){function t(t){return"horizontal"===t?{rotate:!0,px:"py",py:"px",x:"y",y:"x",w:"height",h:"width"}:{rotate:!1,px:"px",py:"py",x:"x",y:"y",w:"width",h:"height"}}function n(e,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t(l.orient(e,n)),o=l.graphs(e,n).map(function(t,e){var n={data:t,index:e,x:l.x(t,e),y:l.y(t,e),tooltipGraph:l.tooltipGraph(t,e),shift:l.shift(t,e),stackBy:l.stackBy(t,e),key:l.key(t,e),color:l.color(t,e)};return n.values=l.values(t,e).map(function(t,e){return{data:t,index:e,graph:n,key:l.pkey(t,e),x:l.px(t,e),y:l.py(t,e),centered:l.pcentered(t,e),color:l.pcolor(t,e)}}),n});return d.x(function(t){return t[a.x]}).y(function(t){return t[a.y]}),u.entries(o).forEach(function(t,e){return d.out(r(e))(t.values)}),i(o,l.baseline(e,n)),o}function r(t){var e={};return function(n,r,a,o){var i=e[o]=e[o]||[0,0];n.dy=a-r,n.stackIndex=t,n.base=o,n.dy>0?n.extent=[i[0],i[0]+=n.dy]:n.extent=[i[1],i[1]+=n.dy]}}function a(t,e,n){t.attr("transform",function(t){return"translate("+[e[n.x](t),e[n.y](t)]+")"})}function o(t,n){var r=[],a=1/0;t.forEach(function(t){var e=t[n.x],o=t.values,i=e.range();a=Math.min(a,Math.abs(i[1]-i[0])),o.forEach(function(t){r.push(e(t[n.x]))})}),r.sort(e.ascending);for(var o=0;o<r.length-1;o++)r[o+1]!==r[o]&&(a=Math.min(r[o+1]-r[o],a));return a}function i(t,n){if(null===n){var r=[].concat.apply([],t.map(function(t){return t.values})),a=e.extent(r.map(function(t){return t.extent[1]}));n=a[1]<0?a[1]:a[0]>0?a[0]:0}t.forEach(function(t){t.values.forEach(function(t){Math.abs(t.extent[0])<Math.abs(n)&&(t.extent[0]=n)})})}var l={},c=function r(i){var c=i.selection?i.selection():i;return c.each(function(r,d){var s=l.orient(r,d),p=t(s),b=n(r,d,p),h=l.padding(r,d),f=l.groupPadding(r,d),g=l.bandwidth(r,d);g=(1-h)*(g||o(b,p));var m=u.entries(b),y=g/m.length;f*=y;var v=e.select(this).selectAll(".d2b-bar-graph").data(b,function(t){return t.key}),x=v.enter().append("g").attr("class","d2b-bar-graph d2b-graph").style("opacity",0),P=v.merge(x).order(),k=v.exit();i!==c&&(P=P.transition(i),k=k.transition(i)),P.style("opacity",1),k.style("opacity",0).remove(),P.each(function(t){var n=e.select(this),r={x:t.x,y:t.y},o=r[p.x],l=r[p.y],d=t.shift;null===d&&(d=o.bandwidth?o.bandwidth()/2:0);var u=n.selectAll(".d2b-bar-group").data(t.values,function(t){return t.key}),s=u.enter().append("g").attr("class","d2b-bar-group");s.append("rect");var b=u.merge(s).order(),h=u.exit();b.each(function(t){var n=t.centered?d-g/4:d-g/2+t.stackIndex*y+f;t.basepx=o(t.base)+n,t.extentpx=[l(t.extent[0]),l(t.extent[1])],t.extentpxSorted=t.extentpx.slice().sort(e.ascending)}),t.tooltipGraph&&t.tooltipGraph.data(t.values)[p.x](function(e){return t[p.x](e.base)+d})[p.y](function(t){return t.extentpx[1]}).color(function(e){return e.color||t.color}),i!==c&&(b=b.transition(i),h=h.transition(i)),s.attr("class","d2b-bar-group").style("opacity",0).call(a,{x:function(t){return t.basepx},y:function(){return l(0)}},p).select("rect").attr("fill",function(e){return e.color||t.color}).attr(p.w,y-2*f).attr(p.h,0),b.style("opacity",1).call(a,{x:function(t){return t.basepx},y:function(t){return t.extentpxSorted[0]}},p).select("rect").attr("fill",function(e){return e.color||t.color}).attr(p.w,y-2*f).attr(p.h,function(t){return t.extentpxSorted[1]-t.extentpxSorted[0]}),h.style("opacity",0).remove()})}),r},d=f().values(function(t){return t.values}),u=e.nest().key(function(t){return t.stackBy});return s(c,l).addPropGet("type","bar").addPropFunctor("graphs",function(t){return t}).addPropFunctor("padding",.5).addPropFunctor("groupPadding",0).addPropFunctor("bandwidth",null).addPropFunctor("baseline",0).addScaleFunctor("x",e.scaleLinear()).addScaleFunctor("y",e.scaleLinear()).addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("orient","vertical").addPropFunctor("shift",null).addPropFunctor("stackBy",function(t,e){return e}).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values},null).addPropFunctor("color",function(t){return Y(t.label)}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addPropFunctor("pcentered",!1).addPropFunctor("pcolor",null).addPropFunctor("pkey",function(t,e){return e}).addMethod("getComputedGraphs",function(t){return(t.selection?t.selection():t).data().map(function(t,e){return n(t,e)})}).addMethod("getVisiblePoints",function(e){return(e.selection?e.selection():e).data().map(function(e,r){var a=l.orient(e,r),o=t(a),i=n(e,r,o),c=[].concat.apply([],i.map(function(t){return t.values.map(function(e){var n={};return n[""+o.x]=e.base,n[""+o.y]=e.extent[0],n.graph=t,n})})),d=[].concat.apply([],i.map(function(t){return t.values.map(function(e){var n={};return n[""+o.x]=e.base,n[""+o.y]=e.extent[1],n.graph=t,n})}));return c.concat(d)})}),c}function C(){function t(e,n,r){return{data:e,index:n,graph:r,x:u.px(e,n),y:u.py(e,n),color:u.pcolor(e,n)||r.color,symbol:u.psymbol(e,n)||r.color,key:u.pkey(e,n),size:u.psize(e,n),indicator:u.pindicator(e,n),children:(u.pchildren(e,n)||[]).map(function(e,n){return t(e,n,r)})}}function n(e,n){var r=u.graphs(e,n).map(function(e,n){var r={data:e,index:n,tendancy:u.tendancy(e,n),x:u.x(e,n),y:u.y(e,n),tooltipGraph:u.tooltipGraph(e,n),shift:u.shift(e,n),key:u.key(e,n),color:u.color(e,n),symbol:u.symbol(e,n)};return r.values=u.values(e,n).map(function(e,n){return t(e,n,r)}),r});return r.forEach(function(t){return t.values.forEach(function(e){return d(e,t.tendancy)})}),r}function a(t,e){t.data.expanded=e,t.children.forEach(function(t){return a(t,e)})}function o(t,e){var n=5,r=5;t.selectAll(".d2b-bubble-indicator.d2b-active").attr("transform",function(){var t=this.getBBox();t.width+n>e&&n>0&&(n=5,r+=t.height+5);var a="translate("+n+", "+r+")";return n+=t.width+5,a})}function i(t,n,r,a,o){t.each(function(t){var i=e.select(this),l=i.attr("transform");l||i.attr("transform","translate("+(r(t.parent?t.parent.x:t.x)+o+",")+(a(t.parent?t.parent.y:t.y)+")")),t.children.length?i.attr("cursor","pointer").on("click",function(){e.select(this).dispatch("change",{bubbles:!0,cancelable:!0})}).on("change",function(t){return t.data.expanded=!t.data.expanded}):i.attr("cursor","").on("click",null),n&&(i=i.transition(n)),t.data.expanded?i.style("opacity",0).selectAll("*").remove():i.style("opacity",null).call(u.point),i.attr("transform","translate("+(r(t.x)+o)+", "+a(t.y)+")")})}function l(t){t.each(function(t){var n=e.select(this).classed("d2b-active",t.data.expanded);if(!t.data.expanded)return n.selectAll("rect, text, path").remove();var r=n.select("rect"),o=n.select("text"),i=n.select("path");r.size()||(r=n.append("rect")),o.size()||(o=n.append("text")),i.size()||(i=n.append("path")),o.text(function(t){return t.indicator.substring(0,5)}).attr("x",20);var l=o.node().getBBox();o.attr("y",l.height/1.35),r.on("click",function(){e.select(this).dispatch("change",{bubbles:!0,cancelable:!0})}).on("change",function(t){t.data.expanded=!t.data.expanded,t.data.expanded||a(t,!1)}).attr("width",l.width+25).attr("height",l.height).style("fill",u.point.fill()).style("stroke",u.point.stroke()),i.attr("d",function(t){return p.type(t.symbol)()}).attr("transform","translate(10, 9.5)").style("fill",u.point.stroke())})}function c(t,n,r,a,o,d,u,s){var p=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0,b=t.selectAll(".d2b-bubble-pack.d2b-depth-"+p).data(n,function(t){return t.key}),h=b.enter().append("g").attr("class","d2b-bubble-pack d2b-depth-"+p),f=b.merge(h);h.append("g").attr("class","d2b-bubble-point").style("opacity",0),i(f.select(".d2b-bubble-point"),r,a,o,d),h.append("g").attr("class","d2b-bubble-indicator"),l(f.select(".d2b-bubble-indicator")),f.each(function(t){var n=e.select(this),i=n.selectAll(".d2b-bubble-pack");i=r?i.transition(r):i,t.children.length&&t.data.expanded?c(n,t.children,r,a,o,d,u,s,p+1):(s&&s(t),i.remove().select(".d2b-bubble-point").style("opacity",0).attr("transform","translate("+[a(t.x)+d,o(t.y)]+")"))});var g=b.exit();r&&(g=g.transition(r)),g.remove()}function d(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;t.children=t.children||[],t.leaves=t.children.length?[]:[t],t.depth=r,t.children.length&&t.children.forEach(function(e){d(e,n,r+1),e.parent=t,t.leaves=t.leaves.concat(e.leaves)}),t.size=t.size||e.sum(t.leaves,function(t){return t.size}),t.x=t.x||(n.x||n)(t.leaves,function(t){return t.x},function(t){return t.size}),t.y=t.y||(n.y||n)(t.leaves,function(t){return t.y},function(t){return t.size})}var u={},p=e.symbol().size(80),b=function t(r){var a=r.selection?r:null,i=r.selection?r.selection():r,l=i.selectAll(".d2b-bubble-pack-graph").data(function(t,e){return n(t,e)},function(t){return t.key}),d=l.enter().append("g").attr("class","d2b-bubble-pack-graph d2b-graph"),s=l.merge(d).order(),p=l.exit();return a&&(s=s.transition(a),p=p.transition(a)),s.style("opacity",1),p.style("opacity",0).remove(),r.each(function(n,r){var i=e.select(this),l=u.duration(n,r),d=i.selectAll(".d2b-bubble-pack-graph");i.on("change",function(){i.transition().duration(l).call(t)});var s=0;d.each(function(t){var n=e.select(this),r=t.x.range();s=Math.max(s,Math.abs(r[0]-r[1]));var o=t.shift;null===o&&(o=t.x.bandwidth?t.x.bandwidth()/2:0),u.point.fill(function(t){return t.color}).type(function(t){return t.symbol});var l=t.tooltipGraph?t.tooltipGraph.clear().x(function(e){return t.x(e.x)+o}).y(function(e){return t.y(e.y)}).color(function(t){return t.color}).addPoint:null;c(n,t.values,a,t.x,t.y,o,i,l)}),o(i,s)}),t};return s(b,u).addProp("point",_().size(function(t){return 100*t.size}),null,function(){u.point.active(function(t){return!!t.children.length})}).addPropGet("type","bubblePack").addPropFunctor("duration",250).addPropFunctor("graphs",function(t){return t}).addScaleFunctor("x",e.scaleLinear()).addScaleFunctor("y",e.scaleLinear()).addPropFunctor("tendancy",v,function(t){return arguments.length?(t&&t.tendancy?u.tendancy=function(){return t}:u.tendancy=r(t),b):u.tendancy}).addPropFunctor("tooltipGraph",function(t){return t.tooltipGraph}).addPropFunctor("shift",null).addPropFunctor("key",function(t){return t.label}).addPropFunctor("values",function(t){return t.values}).addPropFunctor("color",function(t){return Y(t.label)}).addPropFunctor("symbol",function(){return e.symbolCircle}).addPropFunctor("px",function(t){return t.x}).addPropFunctor("py",function(t){return t.y}).addPropFunctor("psize",function(t){return t.size}).addPropFunctor("pchildren",function(t){return t.children}).addPropFunctor("pcolor",null).addPropFunctor("psymbol",e.symbolCircle).addPropFunctor("pindicator",function(t){return t.label}).addPropFunctor("pkey",function(t,e){return e}).addMethod("getComputedGraphs",function(t){return(t.selection?t.selection():t).data().map(function(t,e){return n(t,e)})}).addMethod("getVisiblePoints",function(t){function e(t,n,r){t.data.expanded?t.children.forEach(function(t){return e(t,n,r)}):n.push({x:t.x,y:t.y,graph:r})}var n=b.getComputedGraphs(t);return n.map(function(t){return[].concat.apply([],t.map(function(t){var n=[];return t.values.forEach(function(r){return e(r,n,t)}),n}))})}),b}function S(){function t(t){return n(e.hierarchy(t,g.children).sum(g.size))}function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(t.key=g.key(t.data,e),t.color=g.color(t.data,e),t.label=g.label(t.data,e),t.children)return t.children.forEach(n),t}function r(t){var e=null;return t.each(function(t){t.data.selected&&(e=t)}),e||(e=t),e.data.selected=!0,e}function a(t,e){t.ancestors().concat(t.descendants()).filter(function(t){return t.depth<=e&&t.value>0}).forEach(function(t){return t.visible=!0})}function o(t,e,n,r){var a=g.innerRadius(t,e),o=g.outerRadius(t,e),i=g.ancestorPadding(t,e),l=g.ancestorRatio(t,e),c=0;n.each(function(t){t.visible&&(c=Math.max(c,t.depth))});var d=o-a-i,u=a+d*l,s=g.ancestorBanding.copy().range([a,u]).domain([0,r.depth+1]),p=g.descendantBanding.copy().range([u+i,o]).domain([r.depth+1,c+1]);return function(t){var e=void 0;return e=t<=r.depth?s:p,{inner:e(t),outer:e(t+1)}}}function i(t){return t>Math.PI?F(t)+90:F(t)-90}function c(t,e){var n=(e.inner-e.outer)/2.2;return t>Math.PI?-n:n}function d(t){return t>Math.PI?"end":"start"}function p(t,n,r,a,o,s){var h="arc"===n?l:u;t=t.filter(function(t){return t.visible}),g.pie.startAngle(a).endAngle(o),g.pie(t).forEach(function(t){var e=s.radii(t.data.depth);t.data.startAngle=t.startAngle,t.data.endAngle=t.endAngle,t.data.padAngle=t.padAngle,t.data.innerRadius=e.inner,t.data.outerRadius=e.outer,t.data.centerAngle=(t.startAngle+t.endAngle)/2,t.data.rotate=i(t.data.centerAngle),t.data.labelOffset=c(t.data.centerAngle,e),t.data.labelAnchor=d(t.data.centerAngle)});var f=e.select(this),y="d2b-sunburst-level-"+r,v=f.selectAll(".d2b-sunburst-"+n+"-group."+y),x=v.data();v=v.data(t,function(t){return t.key});var P=v.enter().append("g").attr("class","d2b-sunburst-"+n+"-group "+y),k=P.append("arc"===n?"path":"text").attr("class","d2b-sunburst-"+n+" "+y).each(function(e,n){var r=s.oldRadii(e.depth),a=e.neighbor||b(n,x,t);this.current={startAngle:a.startAngle,endAngle:a.endAngle,innerRadius:r.inner,outerRadius:r.outer,rotate:i((a.startAngle+a.endAngle)/2)},e.children&&e.children.forEach(function(t){return t.neighbor=a})});P.append("g").attr("class","d2b-sunburst-"+n+"-children "+y),"arc"===n?k.style("fill",function(t){return t.color}):k.style("opacity",0).attr("y",4);var w=v.exit();v=v.merge(P),v.select(".d2b-sunburst-"+n+"."+y).classed("d2b-sunburst-ancestor",function(t){return t.depth<t.selected.depth}),s.transition&&(w.each(function(r,a){var o=b(a,t,x),l=e.select(this),d=l.selectAll(".d2b-sunburst-"+n).datum(function(t){var e=s.radii(t.depth);return t.innerRadius=e.inner,t.outerRadius=e.outer,t.startAngle=o.startAngle,t.endAngle=o.endAngle,t.centerAngle=o.centerAngle,t.rotate=i(t.centerAngle),t.labelOffset=c(t.centerAngle,e),t}).transition(s.transition).call(h,m,{omit:["data","children","parent","selected"]});"label"===n&&d.style("opacity",0).attr("x",function(t){return t.labelOffset})}),w=w.transition(s.transition),v=v.transition(s.transition)),w.remove();var F=v.select(".d2b-sunburst-"+n+"."+y).call(h,m,{omit:["data","children","parent","selected"]});"arc"===n?F.style("fill",function(t){return t.color}):F.text(function(t){return t.depth>=t.selected.depth?t.label:""}).style("opacity",1).attr("x",function(t){return t.labelOffset}).style("text-anchor",function(t){return t.labelAnchor}),v.select(".d2b-sunburst-"+n+"-children."+y).each(function(t){var e=t.children||[];p.call(this,e,n,r+1,t.startAngle,t.endAngle,s)})}function b(t,e,n){var r=h(t,e,n),a=f(t,e,n);return r?{startAngle:r.endAngle,endAngle:r.endAngle}:a?{startAngle:a.startAngle,endAngle:a.startAngle}:{startAngle:0,endAngle:0,centerAngle:0}}function h(t,e,n){for(var r=e.length;--t>=0;)for(var a=n[t].key,o=0;o<r;++o)if(e[o].key===a)return e[o]}function f(t,e,n){for(var r=n.length,a=e.length;++t<r;)for(var o=n[t].key,i=0;i<a;++i)if(e[i].key===o)return e[i]}var g={},m=e.arc(),y=function n(i){var l=i.selection?i.selection():i;return g.pie.value(function(t){return t.value}),l.each(function(c,d){var u=e.select(this),s=g.zoomable(c,d),b=g.highlight(c,d),h=g.innerRadius(c,d),f=g.showLabels(c,d),m=t(c),y=r(m);a(y,g.descendantLevels(c,d)+y.depth),m.each(function(t){return t.selected=y});var v=o(c,d,m,y);p.call(this,[m],"arc",0,g.startAngle(c,d),g.endAngle(c,d),{transition:i!==l?i:null,oldRadii:this.oldRadii||v,radii:v,zoomable:s}),p.call(this,f?[m]:[],"label",0,g.startAngle(c,d),g.endAngle(c,d),{transition:i!==l?i:null,oldRadii:this.oldRadii||v,radii:v});var x=u.selectAll(".d2b-sunburst-center");x.data([y]).enter().append("circle").attr("class","d2b-sunburst-center").merge(x).attr("cx",0).attr("cy",0).attr("r",Math.max(0,h)).on("click",function(t){t.parent&&(t.data.selected=!1,t.parent.data.selected=!0,u.transition().duration(g.duration(t,d)).call(n))}),this.oldRadii=v,u.selectAll("path.d2b-sunburst-arc").on("click",s?function(t){m.each(function(t){return t.data.selected=!1}),t.data.selected=!0,u.transition().duration(g.duration(c,d)).call(n)}:null).on("mouseover",b?function(t){var e=t.ancestors();u.selectAll(".d2b-sunburst-arc").classed("d2b-transparent",function(t){return e.indexOf(t)===-1}),u.selectAll(".d2b-sunburst-label").classed("d2b-transparent",function(t){return e.indexOf(t)===-1})}:null).on("mouseout",function(){u.selectAll(".d2b-sunburst-arc").classed("d2b-transparent",!1),u.selectAll(".d2b-sunburst-label").classed("d2b-transparent",!1)})}),n};return s(y,g).addPropFunctor("duration",250).addPropFunctor("key",function(t){return t.label}).addPropFunctor("label",function(t){return t.label}).addPropFunctor("color",function(t){return Y(t.label)}).addPropFunctor("children",function(t){return t.children}).addPropFunctor("size",function(t){return t.size}).addPropFunctor("zoomable",!0).addPropFunctor("highlight",!0).addPropFunctor("innerRadius",30).addPropFunctor("outerRadius",200).addPropFunctor("startAngle",0).addPropFunctor("endAngle",2*Math.PI).addPropFunctor("ancestorPadding",10).addPropFunctor("ancestorRatio",.2).addPropFunctor("descendantLevels",1/0).addPropFunctor("showLabels",!1).addProp("ancestorBanding",e.scaleLinear()).addProp("descendantBanding",e.scalePow().exponent(.85)).addProp("pie",e.pie().sort(null)),y}function O(){function t(t,e,n,r,a){var o=[],i=[],l=t.data;l&&(d(t,l,e,n,r),o=[l],t.info.showGrid&&(i=[l])),t.update=n.selectAll(".d2b-"+t.type+"-axis").data(o),t.enter=t.update.enter().append("g").attr("class","d2b-axis d2b-"+t.type+"-axis"),t.labelEnter=t.enter.append("text").attr("class","d2b-axis-label"),t.svg=t.enter.merge(t.update),t.label=t.svg.select(".d2b-axis-label"),t.update.exit().remove(),t.gridUpdate=n.selectAll(".d2b-"+t.type+"-grid").data(i),t.gridEnter=t.gridUpdate.enter().append("g").attr("class","d2b-grid d2b-"+t.type+"-grid"),t.gridUpdate.exit().remove(),t.grid=t.gridEnter.merge(t.gridUpdate),a&&(t.svg=t.svg.transition(a),t.update=t.update.transition(a),t.grid=t.grid.transition(a),t.gridUpdate=t.gridUpdate.transition(a),t.label=t.label.transition(a))}function n(t,e,n,r){t.data&&(l(t),c(t,e),t.enter.call(t.info.axis).attr("transform","translate("+n+", "+r+")"),t.update.call(t.info.axis).attr("transform","translate("+n+", "+r+")"),t.svg.call(g,t).on("end",function(){t.svg.call(g,t)}))}function r(t,e,n){t.data&&(i(t,n),c(t,e),t.gridUpdate.call(t.info.axis).selectAll(".tick text").remove(),t.gridEnter.call(t.info.axis).selectAll(".tick text").remove())}function o(t,e){t.data&&(t.labelEnter.text(t.info.label).attr("x",h(t,e)).attr("y",b(t)).attr("text-anchor",u(t)),t.label.text(t.info.label).attr("x",h(t,e)).attr("y",b(t)).attr("text-anchor",u(t)))}function i(t,e){if(t.data)switch(t.type){case"x":return t.info.axis.tickSize("inner"===t.info.orient?-e:e);case"x2":return t.info.axis.tickSize("inner"===t.info.orient?e:-e);case"y":return t.info.axis.tickSize("inner"===t.info.orient?e:-e);case"y2":return t.info.axis.tickSize("inner"===t.info.orient?-e:e)}}function l(t){t.data&&t.info.axis.tickSizeOuter(0).tickSizeInner(t.info.tickSize)}function c(t,e){t.data&&t.info.axis.scale().range([0,e])}function d(t,e,n,r,a){if(t.data){var o=t.info={};o.axis=v.axis(e,n),o.orient=v.orient(e,n),o.wrapLength=v.wrapLength(e,n),o.label=v.label(e,n)||"",o.labelOrient=v.labelOrient(e,n),o.tickSize=v.tickSize(e,n),o.showGrid=v.showGrid(e,n),o.labelOrient1=o.labelOrient.split(" ")[0],o.labelOrient2=o.labelOrient.split(" ")[1],o.wrapAnchor=p(t),l(t),c(t,a);var i=r.append("g").attr("class","d2b-axis d2b-"+t.type+"-axis").call(o.axis).call(g,t);o.axisBox=i.node().getBBox();var d=i.append("text").attr("class","d2b-axis-label d2b-"+t.type+"-label").text(o.label);o.labelBox=d.node().getBBox(),i.remove()}}function u(t){if(t.data){var e=t.info,n=["y","y2"].indexOf(t.type)>-1;return"start"===e.labelOrient2&&n?"end":"end"!==e.labelOrient2||n?"middle"===e.labelOrient2?"middle":"start":"end"}}function p(t){if(t.data)switch(t.type){case"x":return"inner"===t.info.orient?"end":"start";case"x2":return"outer"===t.info.orient?"end":"start";case"y":case"y2":return"middle";default:return"start"}}function b(t){if(t.data){var e=t.info;switch(t.type+" "+e.orient+" "+e.labelOrient1){case"x inner inner":case"x2 outer outer":return-e.axisBox.height-x;case"x inner outer":case"x2 outer inner":return e.labelBox.height+x;case"x outer inner":case"x2 inner outer":case"y inner outer":case"y2 outer inner":return-x;case"x outer outer":case"x2 inner inner":return e.labelBox.height+e.axisBox.height+x;case"y inner inner":case"y2 outer outer":return e.labelBox.height+e.axisBox.width+x;case"y outer inner":case"y2 inner outer":return e.labelBox.height+x;case"y outer outer":case"y2 inner inner":return-e.axisBox.width-x}}}function h(t,e){if(t.data)return"start"===t.info.labelOrient2?0:"middle"===t.info.labelOrient2?e/2:e}function f(t){var e={top:0,left:0,right:0,bottom:0};return t.x.data&&("outer"===t.x.info.orient&&(e.bottom+=t.x.info.axisBox.height),"outer"===t.x.info.labelOrient1&&(e.bottom+=t.x.info.labelBox.height+x)),t.x2.data&&("outer"===t.x2.info.orient&&(e.top+=t.x2.info.axisBox.height),"outer"===t.x2.info.labelOrient1&&(e.top+=t.x2.info.labelBox.height)),t.y.data&&("outer"===t.y.info.orient&&(e.left+=t.y.info.axisBox.width),"outer"===t.y.info.labelOrient1&&(e.left+=t.y.info.labelBox.height)),t.y2.data&&("outer"===t.y2.info.orient&&(e.right+=t.y2.info.axisBox.width),"outer"===t.y2.info.labelOrient1&&(e.right+=t.y2.info.labelBox.height+x)),e.top=Math.max(e.top,10),e.bottom=Math.max(e.bottom,10),e.left=Math.max(e.left,10),e.right=Math.max(e.right,10),e}function g(t,n){if(n.data){var r=n.info.wrapLength,o=n.info.wrapAnchor;t.selectAll(".tick text").each(function(){var t=e.select(this);(t.html()||"").indexOf("tspan")===-1&&(this.storeText=t.text()),t.text("")}).call(a,function(){return this.storeText},r,o)}}function m(t){return"number"==typeof t?{top:t,left:t,right:t,bottom:t}:t}function y(t){return m(t||0)}var v={},x=5,P=function a(i){var l=i.selection?i.selection():i;return l.each(function(a,c){var d=v.size.call(this,a,c)||{width:960,height:500},u=y(v.margin.call(this,a,c)),s=v.x.call(this,a,c),p=v.x2.call(this,a,c),b=v.y.call(this,a,c),h=v.y2.call(this,a,c),g=e.select(this),x={x:{type:"x",data:s},x2:{type:"x2",data:p},y:{type:"y",data:b},y2:{type:"y2",data:h}},P=m(v.padding.call(this,a,c)),k=g.selectAll(".d2b-plane").data([a]),w=k.enter().append("g").attr("class","d2b-plane"),F=k.merge(w),A=i!==l?i:null;t(x.x,c,F,d.width,A),t(x.x2,c,F,d.width,A),t(x.y,c,F,d.height,A),t(x.y2,c,F,d.height,A),P||(P=f(x));var _={top:P.top+u.top,bottom:P.bottom+u.bottom,left:P.left+u.left,right:P.right+u.right};_.width=d.width-_.left-_.right,_.height=d.height-_.top-_.bottom,this.__box__=_,A&&(k=k.transition(A)),w.attr("transform","translate("+_.left+", "+_.top+")"),k.attr("transform","translate("+_.left+", "+_.top+")"),n(x.x,_.width,0,_.height),n(x.x2,_.width,0,0),n(x.y,_.height,0,0),n(x.y2,_.height,_.width,0),r(x.x,_.width,_.height),r(x.x2,_.width,_.height),r(x.y,_.height,_.width),r(x.y2,_.height,_.width),o(x.x,_.width),o(x.x2,_.width),o(x.y,-_.height),o(x.y2,-_.height)}),a};return s(P,v).addPropFunctor("size",function(t){return t.size}).addPropFunctor("padding",null).addPropFunctor("margin",0).addPropFunctor("x",function(t){return t.x}).addPropFunctor("x2",function(t){return t.x2}).addPropFunctor("y",function(t){return t.y}).addPropFunctor("y2",function(t){return t.y2}).addPropFunctor("axis",function(t){return t.axis}).addPropFunctor("orient",function(t){return t.orient||"outer"}).addPropFunctor("wrapLength",function(t){return t.wrapLength||1/0}).addPropFunctor("tickSize",function(t){return t.tickSize||6}).addPropFunctor("showGrid",function(t){return null===t.showGrid||void 0===t.showGrid||t.showGrid}).addPropFunctor("label",function(t){return t.label}).addPropFunctor("labelOrient",function(t){return t.labelOrient||"outer middle"}).addMethod("box",function(t){var e=t.node?t.node():t;return e?e.__box__:null}),P}function T(){function t(t,l){var s=e.select(this),p=s.select(".d2b-chart-container"),g=p.node().__size__,m=o.radius(t,g.width,g.height),y=o.startAngle(t),v=o.endAngle(t),x=o.donutRatio(t),P=o.legend.empty(),k=o.values(t).filter(function(t){return!P(t)});o.legend.html(o.label),s.select(".d2b-legend-container").call(o.legend).on("change",function(){return s.transition(o.duration(t)).call(i)}).selectAll(".d2b-legend-item").on("mouseover",function(t){r.call(this,s,t)}).on("mouseout",function(t){a.call(this,s,t)});var w=e.sum(k,function(t){return o.value(t)}),F=p.selectAll(".d2b-pie-chart").data([k]),A=F.enter().append("g").attr("class","d2b-pie-chart"),_=function(t){return t=c.startAngle(y).endAngle(v)(t),t.forEach(function(t){t.outerRadius=m,t.innerRadius=m*x}),t};F=F.merge(A).datum(_),l&&(F=F.transition(l)),F.call(h);var z=p.selectAll(".d2b-pie-arc").each(function(t){this.__outerRadius__=t.outerRadius,t.__percent__=t.value/w}).on("mouseover",function(t){r.call(this,s,t.data)}).on("mouseout",function(t){a.call(this,s,t.data)}).call(o.tooltip),M=z.selectAll(".d2b-pie-arc-percent").data(function(t){return[t]});M.enter().append("g").attr("class","d2b-pie-arc-percent").append("text").attr("y",6),z.each(function(){var t=e.select(this),n=t.select(".d2b-pie-arc path").node().current,r=t.select(".d2b-pie-arc-percent"),a=r.select("text").node();r.node().current=n,a.current=a.current||0}),l&&(z=z.each(function(){this.transitioning=!0}).transition(l).on("end",function(){this.transitioning=!1})),z.select(".d2b-pie-arc-percent").call(u,b).select("text").call(d,function(t){return o.value(t.data)/w},f).style("opacity",function(t){return o.showPercent.call(this,t.data,w)?1:0});var E=n(t,m,g);A.attr("transform","translate("+E.x+", "+E.y+")"),F.attr("transform","translate("+E.x+", "+E.y+")")}function n(t,e,n){var r=o.center(t,n.width,n.height,e),a=o.at(t,n.width,n.height).split(" ");if(!r){switch(a={x:a[1],y:a[0]},r={},a.x){case"left":r.x=e;break;case"center":case"middle":r.x=n.width/2;break;case"right":default:r.x=n.width-e}switch(a.y){case"bottom":r.y=n.height-e;break;case"center":case"middle":r.y=n.height/2;break;case"top":default:r.y=e}}return r}function r(t,e){this.transitioning||t.selectAll(".d2b-pie-arc").filter(function(t){return t.data===e}).each(function(t){t.outerRadius=1.03*this.__outerRadius__}).select("path").transition().duration(100).call(l,b)}function a(t,e){this.transitioning||t.selectAll(".d2b-pie-arc").filter(function(t){return t.data===e}).each(function(t){t.outerRadius=this.__outerRadius__}).select("path").transition().duration(100).call(l,b)}var o={},i=function e(n){n.call(o.chartFrame);var r=n.selection?n.selection():n;return r.each(function(e){t.call(this,e,n!==r?n:null)}),e},c=e.pie().sort(null),b=e.arc().outerRadius(function(t){return t.outerRadius}).innerRadius(function(t){return t.innerRadius}),h=M().arc(b),f=e.format(".0%");return s(i,o).addProp("chartFrame",y().legendEnabled(!0).breadcrumbsEnabled(!1)).addProp("legend",m().clickable(!0).dblclickable(!0)).addProp("key",function(t){return t.label;
},null,function(t){o.legend.key(t),h.key(t)}).addProp("tooltip",p().followMouse(!0).html(function(t){return"<b>"+o.label(t.data)+"</b>: "+o.value(t.data)+" ("+f(t.__percent__)+")"})).addPropFunctor("duration",250).addPropFunctor("values",function(t){return t}).addPropFunctor("donutRatio",0).addPropFunctor("startAngle",0).addPropFunctor("endAngle",2*Math.PI).addPropFunctor("at","center center").addPropFunctor("showPercent",function(t,e){return o.value(t)/e>.03}).addPropFunctor("center",null).addPropFunctor("radius",function(t,e,n){return Math.min(e,n)/2}).addPropFunctor("sort",null).addPropFunctor("color",function(t){return Y(t.label)},null,function(t){o.tooltip.color(function(n){return e.rgb(t(n.data)).darker(.3)}),o.legend.color(t),h.color(t)}).addPropFunctor("value",function(t){return t.value},null,function(t){return c.value(t)}).addPropFunctor("label",function(t){return t.label}),i}function L(){function t(t,a){var s=e.select(this),p=s.select(".d2b-chart-container"),g=s.select(".d2b-legend-container"),m=p.node().__size__,y=r(t),v=o(y),P=b.duration(t),k=n(t,y);i(k);var w=this.tooltip=this.tooltip||h().trackX(!0).trackY(!1).threshold(50);w.title(function(t){return""+(t[0].x||t[0].x1)}).clear(),b.legend.values(k).empty(function(t){return t.data.hidden}).setEmpty(function(t,e,n){return t.data.hidden=n}).html(function(t){return t.label}).color(function(t){return t.color}),g.call(b.legend).on("change",function(){return s.transition(P).call(f)}).selectAll(".d2b-legend-item").on("mouseover",function(t){return l(t,p)}).on("mouseout",function(t){return c(t,p)}),b.plane.size(m);var F=p.selectAll(".d2b-axis-plane").data([t]),A=F,_=F.enter().append("g").attr("class","d2b-axis-plane");F=F.merge(_);var z=p.selectAll(".d2b-axis-wrapper").data([t]),M=z,E=z.enter().append("g").attr("class","d2b-axis-wrapper");E.append("rect").attr("class","d2b-axis-background"),z=z.merge(E);var B=z.selectAll(".d2b-axis-set").data(y),G=B.enter().append("g").attr("class","d2b-axis-set"),R=B.exit();B=B.merge(G).order(),a&&(R=R.transition(a),M=M.transition(a),A=A.transition(a));var C={x:[],x2:[],y:[],y2:[]};B.each(function(t){var n=e.select(this);this.genUpdate=n.selectAll(".d2b-graph-generator").data(t.generators,function(t){return t.generator.type()}),this.genEnter=this.genUpdate.enter().append("g").attr("class","d2b-graph-generator").style("opacity",0),this.genExit=this.genUpdate.exit(),this.gen=this.genUpdate.merge(this.genEnter).order(),this.gen.each(function(n,r){var a=e.select(this),o=n.generator.tooltipGraph(function(t){if(r)return null;var e=w.graph(X());return d(t,v).tooltipConfig(e),e}).color(function(t){return d(t,v).color}).graphs(t.graphs.map(function(t){return t.data}).filter(function(t){return!t.hidden})).getVisiblePoints(a)[0];n.generator.duration&&n.generator.duration(P),o.forEach(function(t){var e=d(t.graph,v);C[e.xType||"x"].push(t.x),C[e.yType||"y"].push(t.y)})})});var S=b.x(t,C.x),O=b.y(t,C.y),T=b.x2(t,C.x2),L=b.y2(t,C.y2);u(S,C.x,x.x),u(O,C.y,x.y,!0),u(T,C.x2,x.x2),u(L,C.y2,x.y2,!0),b.plane.axis(function(t){return t.__axis__}).x(S.__axis__?S:null).y(O.__axis__?O:null).x2(T.__axis__?T:null).y2(L.__axis__?L:null),_.call(b.plane),A.call(b.plane);var N=b.plane.box(F);B.each(function(){a&&(this.genUpdate=this.genUpdate.transition(a),this.genExit=this.genExit.transition(a).style("opacity",0)),this.genExit.remove(),this.gen.each(function(t){var n=e.select(this);a&&(n=n.transition(a)),t.generator.x(function(t){return"x2"===t.xType?T.__axis__.scale():S.__axis__.scale()}).y(function(t){return"y2"===t.yType?L.__axis__.scale():O.__axis__.scale()}),n.style("opacity",1).call(t.generator)}),e.select(this).on("change",function(){return s.transition(P).call(f)})}),R.style("opacity",0).remove(),E.attr("transform","translate("+N.left+", "+N.top+")").select("rect.d2b-axis-background").attr("height",Math.max(0,N.height)).attr("width",Math.max(0,N.width)),M.attr("transform","translate("+N.left+", "+N.top+")").select("rect.d2b-axis-background").attr("height",Math.max(0,N.height)).attr("width",Math.max(0,N.width)),w.row(function(t){var e=d(t.graph.data,v).label;return e+": "+(t.y||t.y1)}),b.tooltipConfig(w),w.svgContainer(z).tracker(z).size(N)}function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r(t),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o(e),a=n.filter(function(t){return!t.group});return a.forEach(function(t){t.groupType="graph",t.groupGraphs=[t]}),(b.groups(t)||[]).map(function(t){var e={groupType:"group",data:t,label:b.groupLabel(t),color:b.groupColor(t)};return e.groupGraphs=n.filter(function(t){return e.label===t.group}),e.groupGraphs.forEach(function(t){t.color=e.color}),e}).concat(a)}function r(t){return b.sets(t).map(function(t){return{data:t,generators:b.setGenerators(t).map(function(t){return{data:t,generator:b.generator(t)}}),graphs:a(t)}})}function a(t){return b.setGraphs(t).map(function(t){return{data:t,label:b.graphLabel(t)||"",color:b.graphColor(t),group:b.graphGroup(t),tooltipConfig:b.graphTooltipConfig||function(){}}})}function o(t){return[].concat.apply([],t.map(function(t){return t.graphs}))}function i(t){t.forEach(function(t){t.groupGraphs.forEach(function(e){return e.data.hidden=t.data.hidden})})}function l(t,e){var n=e.selectAll(".d2b-graph");t.groupGraphs.some(function(t){return!t.data.hidden})&&n.style("opacity",.2).filter(function(e){return t.data===e.data||(t.groupGraphs.map(function(t){return t.data})||[]).indexOf(e.data)>-1}).style("opacity","")}function c(t,e){e.selectAll(".d2b-graph").style("opacity",1)}function d(t,e){return e.filter(function(e){return e.data===t||e.data===t.data})[0]}function u(t,e,n,r){if(e.length){var a=t.axis||n.axis,o=t.scale?t.scale.copy():p(e,n),i=o.domain();if(r&&i.reverse(),!o.bandwidth&&t.linearPadding){var l=i[1]-i[0];i[0]=i[0]+l*t.linearPadding[0],i[1]=i[1]+l*t.linearPadding[1]}o.domain(i),t.__axis__=a.scale(o)}}function p(t,n){var r=t.some(function(t){return isNaN(t)}),a=r?e.set(t).values():e.extent(t),o=r?n.band:n.linear;return o.domain(a)}var b={},f=function e(n){n.call(b.chartFrame);var r=n.selection?n.selection():n;return r.each(function(e){t.call(this,e,n!==r?n:null)}),e};s(f,b).addProp("plane",O()).addProp("chartFrame",y().legendEnabled(!0).breadcrumbsEnabled(!1)).addProp("legend",m().clickable(!0).dblclickable(!0)).addPropFunctor("duration",250).addPropFunctor("x",function(){return{}}).addPropFunctor("y",function(){return{}}).addPropFunctor("x2",function(){return{}}).addPropFunctor("y2",function(){return{}}).addPropFunctor("tooltipConfig",function(t){return t.tooltipConfig}).addPropFunctor("groups",function(t){return t.groups}).addPropFunctor("sets",function(t){return t.sets}).addPropFunctor("generator",function(t){return t}).addPropFunctor("groupLabel",function(t){return t.label}).addPropFunctor("groupColor",function(t){return Y(b.groupLabel(t))}).addPropFunctor("setGenerators",function(t){return t.generators}).addPropFunctor("setGraphs",function(t){return t.graphs}).addPropFunctor("graphLabel",function(t){return t.label}).addPropFunctor("graphGroup",function(t){return t.group}).addPropFunctor("graphColor",function(t){return Y(b.graphLabel(t))}).addPropFunctor("graphTooltipConfig",function(t){return t.tooltipConfig});var g=e.scaleBand(),v=e.scaleLinear(),x={x:{band:g.copy(),linear:v.copy(),axis:e.axisBottom()},y:{band:g.copy(),linear:v.copy(),axis:e.axisLeft()},x2:{band:g.copy(),linear:v.copy(),axis:e.axisTop()},y2:{band:g.copy(),linear:v.copy(),axis:e.axisRight()}};return f}function N(){function t(t,e){t.select(".d2b-breadcrumbs-container").datum(e).transition("sunburst-breadcrumbs").duration(100).call(a.breadcrumbs)}function n(e){var r=e.select(".d2b-sunburst-chart"),o=e.selectAll(".d2b-sunburst-arc.d2b-sunburst-level-0").datum(),i=o.selected;t(e,[i]),r.selectAll(".d2b-sunburst-arc").call(a.tooltip.clear).call(a.tooltip).on("mouseover.breadcrumbs",function(n){var r=n.ancestors();r=r.slice(0,r.indexOf(i)+1),t(e,r.reverse())}).on("mouseout.breadcrumbs",function(){return t(e,[i])}),r.on("mouseout",function(){return n(e)}).on("click",function(){return n(e)})}function r(t,r){var o=e.select(this),i=o.select(".d2b-chart-container"),l=i.node().__size__,c="translate("+l.width/2+", "+l.height/2+")",d=i.selectAll(".d2b-sunburst-chart").data(function(t){return[t]}),u=d.enter().append("g").attr("transform",c).attr("class","d2b-sunburst-chart");d=d.merge(u),r&&(d=d.transition(r)),a.sunburst.outerRadius(a.outerRadius(t,l.width,l.height)).innerRadius(a.innerRadius(t,l.width,l.height)),d.attr("transform",c).call(a.sunburst),n(o)}var a={},o=function t(e){e.call(a.chartFrame);var n=e.selection?e.selection():e;return n.each(function(t){r.call(this,t,e!==n?e:null)}),t};s(o,a).addProp("chartFrame",y().legendEnabled(!1).breadcrumbsEnabled(!0)).addProp("sunburst",S()).addProp("breadcrumbs",g()).addProp("tooltip",p(),null,function(t){return t.color(function(t){return t.color})}).addPropFunctor("duration",250).addPropFunctor("outerRadius",function(t,e,n){return Math.min(e,n)/2}).addPropFunctor("innerRadius",function(t,e,n){return Math.min(50,Math.min(e,n)/4)});var i=e.format(",.0f"),l=e.format(".1%"),c=function(t){var e=t.value/t.selected.value,n=e>1?"":"<div class = 'd2b-sunburst-percent'>\n        "+l(t.value/t.selected.value)+"\n      </div>";return"\n      <div class = 'd2b-sunburst-label'>\n        "+t.label+"\n      </div>\n      <div class = 'd2b-sunburst-value'>\n        "+i(t.value)+"\n        "+n+"\n      </div>\n    "};return a.breadcrumbs.html(function(t){return"<div class = 'd2b-sunburst-breadcrumb'>"+c(t)+"</div>"}).color(function(t){return t.color}).key(function(t,e){return e}),a.tooltip.followMouse(!0).html(function(t){return"<div class = 'd2b-sunburst-tooltip'>"+c(t)+"</div>"}),o}n('@import "//netdna.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.css";.d2b-vue-container{width:100%;height:100%}.d2b-pie-chart .d2b-pie-arc path{stroke-width:1px;stroke:#fff}.d2b-pie-chart .d2b-pie-arc text{fill:#fff;font-weight:700;pointer-events:none;text-anchor:middle}.d2b-axis-wrapper .d2b-axis-background{opacity:0}.d2b-chart-breadcrumbs{width:200px;padding-left:10px}.d2b-sunburst-breadcrumb .d2b-sunburst-label,.d2b-sunburst-tooltip .d2b-sunburst-label{text-align:center}.d2b-sunburst-breadcrumb .d2b-sunburst-value,.d2b-sunburst-tooltip .d2b-sunburst-value{font-size:14pt;margin-top:5px}.d2b-sunburst-breadcrumb .d2b-sunburst-percent{float:right}.d2b-breadcrumbs:not(.d2b-vertical) .d2b-sunburst-percent{margin-left:30px}.d2b-sunburst-tooltip{text-align:center}.d2b-sunburst-tooltip .d2b-sunburst-percent{display:inline}.d2b-sunburst-tooltip .d2b-sunburst-percent:before{content:"("}.d2b-sunburst-tooltip .d2b-sunburst-percent:after{content:")"}.d2b-line-graph .d2b-line{stroke-width:1.5px;fill:none}.d2b-area-graph .d2b-area{stroke:none;fill-opacity:0.3}.d2b-bar-graph .d2b-bar-group rect{opacity:0.8}.d2b-bubble-pack-graph .d2b-bubble-point{opacity:0.75}.d2b-bubble-pack-graph .d2b-bubble-indicator rect{fill-opacity:0.25;stroke-opacity:0.9;cursor:pointer;stroke-width:1px}.d2b-bubble-pack-graph .d2b-bubble-indicator rect:hover{stroke-width:2px}.d2b-bubble-pack-graph .d2b-bubble-indicator path,.d2b-bubble-pack-graph .d2b-bubble-indicator text{pointer-events:none}.d2b-plane text{font-size:10pt}.d2b-plane .d2b-y2-axis .d2b-axis-label,.d2b-plane .d2b-y-axis .d2b-axis-label{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.d2b-plane .d2b-y2-axis .tick line,.d2b-plane .d2b-y-axis .tick line{stroke-width:0.6px}.d2b-plane .d2b-grid .tick line{stroke-width:0.2px;stroke-opacity:0.4;//:5 5}.d2b-plane .d2b-grid .tick text{display:none}.d2b-plane .d2b-axis-label{fill:#000;font-weight:700}.d2b-plane .tick line{//:#aaa}.d2b-plane path.domain{stroke-width:0.4px;stroke-opacity:0.4}.d2b-sunburst-arc{-webkit-transition:opacity 0.2s,stroke-width 0.2s;transition:opacity 0.2s,stroke-width 0.2s;cursor:pointer;opacity:0.9;stroke-width:0.8px;stroke:#fff}.d2b-sunburst-arc.d2b-transparent{fill-opacity:0.2}.d2b-sunburst-label{font-size:8pt;fill-opacity:0.8;pointer-events:none;font-family:arial}.d2b-sunburst-label.d2b-transparent{fill-opacity:0.2}.d2b-sunburst-center{fill-opacity:0;stroke:none;cursor:pointer}.d2b-sunburst-ancestor{opacity:0.4}.d2b-tooltip-area{pointer-events:none}.d2b-tooltip-area .d2b-tooltip{background:#fff;border:1px solid #bbb;border-radius:2px;position:fixed;box-shadow:0px 0px 2px #ccc}.d2b-tooltip-area .d2b-tooltip-content{padding:6px 10px}.d2b-tooltip-area .d2b-tooltip{margin:0}.d2b-tooltip-area .d2b-tooltip:before{left:0;top:0;position:absolute;z-index:2;content:""}.d2b-tooltip-area .d2b-tooltip-top{-webkit-transform:translate(-50%,-100%);transform:translate(-50%,-100%);margin-left:0;margin-top:-15px}.d2b-tooltip-area .d2b-tooltip-top:before{-webkit-transform:translateX(-50%);transform:translateX(-50%);left:50%;top:100%;width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 6px 0;border-top-color:inherit}.d2b-tooltip-area .d2b-tooltip-bottom{-webkit-transform:translate(-50%,0);transform:translate(-50%,0);margin-left:0;margin-top:15px}.d2b-tooltip-area .d2b-tooltip-bottom:before{-webkit-transform:translateX(-50%);transform:translateX(-50%);left:50%;top:-6px;width:0;height:0;border-style:solid;border-color:transparent;border-width:0 6px 6px;border-bottom-color:inherit}.d2b-tooltip-area .d2b-tooltip-right{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);margin-left:15px;margin-top:0}.d2b-tooltip-area .d2b-tooltip-right:before{-webkit-transform:translateY(-50%);transform:translateY(-50%);left:-6px;top:50%;width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 6px 6px 0;border-right-color:inherit}.d2b-tooltip-area .d2b-tooltip-left{-webkit-transform:translate(-100%,-50%);transform:translate(-100%,-50%);margin-left:-15px;margin-top:0}.d2b-tooltip-area .d2b-tooltip-left:before{-webkit-transform:translateY(-50%);transform:translateY(-50%);left:100%;top:50%;width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 0 6px 6px;border-left-color:inherit}.d2b-tooltip-axis-area{pointer-events:none;font-family:Arial}.d2b-tooltip-axis-area .d2b-tooltip-marker{stroke-width:2px;stroke:#bbb;stroke-dasharray:5,5}.d2b-tooltip-axis-area .d2b-tooltip{opacity:0.9;white-space:nowrap;border:1px solid #ddd;background:hsla(0,0%,100%,.8);position:absolute;box-shadow:0px 0px 2px #ccc}.d2b-tooltip-axis-area .d2b-tooltip .d2b-tooltip-title{text-align:center;background:rgba(150,165,175,.8);padding:5px 10px;font-weight:700;color:#fff}.d2b-tooltip-axis-area .d2b-tooltip .d2b-tooltip-content{padding:5px 10px}.d2b-tooltip-axis-area .d2b-tooltip .d2b-tooltip-content .d2b-tooltip-row{padding-left:5px;border-left-width:3px;border-left-style:solid;margin-bottom:5px}.d2b-tooltip-axis-area .d2b-tooltip .d2b-tooltip-content .d2b-tooltip-row:last-child{margin-bottom:0px}.d2b-breadcrumbs{color:#555;font-size:9pt;box-sizing:content-box}.d2b-breadcrumbs .d2b-breadcrumb{border:0px solid transparent;border-left-width:8px;border-bottom-width:1px;padding:6px 13px;margin-bottom:10px;text-transform:uppercase;position:relative}.d2b-breadcrumbs .d2b-breadcrumb:first-child .d2b-breadcrumb-icon:after,.d2b-breadcrumbs .d2b-breadcrumb:last-child .d2b-breadcrumb-icon:after{position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);left:-15.5px;width:13px;height:13px;text-align:center;font-family:FontAwesome;color:#fff;background-color:inherit;padding:5px;border-radius:15px}.d2b-breadcrumbs .d2b-breadcrumb:first-child .d2b-breadcrumb-icon:after{content:"\\f015"}.d2b-breadcrumbs .d2b-breadcrumb:not(:first-child):last-child .d2b-breadcrumb-icon:after{content:"\\f25a"}.d2b-breadcrumbs:not(.d2b-vertical){white-space:nowrap}.d2b-breadcrumbs:not(.d2b-vertical) .d2b-breadcrumb{border-right-width:1px;border-top-width:1px;white-space:nowrap;display:inline-block}.d2b-breadcrumbs:not(.d2b-vertical) .d2b-breadcrumb:not(:last-child){margin-right:20px}.d2b-breadcrumbs:not(.d2b-vertical) .d2b-breadcrumb:not(:last-child):after{width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 0 6px 6px;border-left-color:inherit;position:absolute;z-index:2;content:"";top:50%;left:100%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.d2b-breadcrumbs.d2b-vertical .d2b-breadcrumb{/*&:after {\n      triangle: pointing-right;\n      width: 100px;\n      height: 100px;\n      background-color: inherit;\n      position: absolute;\n      z-index: 2;\n      content: \'\';\n\n      top: 100%;\n      left: 50%;\n\n      transform: translateX(-50%);\n\n    }*/}.d2b-breadcrumbs.d2b-vertical .d2b-breadcrumb:not(:last-child):after{width:0;height:0;border-style:solid;border-color:transparent;border-width:6px 6px 0;border-top-color:inherit;position:absolute;z-index:2;content:"";top:100%;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.stuff{display:none}.d2b-legend{color:#555;font-size:9pt}.d2b-legend .d2b-legend-item{border:0px solid transparent;padding:2px;padding-left:18px;position:relative;cursor:pointer}.d2b-legend .d2b-legend-item .d2b-legend-icon{position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);left:7px;width:12px;height:12px}.d2b-legend .d2b-legend-item .d2b-legend-svg-icon{margin-left:-5px;margin-top:-5px;pointer-events:none}.d2b-legend .d2b-legend-item .d2b-legend-svg-icon path,.d2b-legend .d2b-legend-item .d2b-legend-svg-icon text{font-family:FontAwesome;text-anchor:middle;alignment-baseline:central;stroke-width:1px;fill-opacity:0.8}.d2b-legend:not(.d2b-vertical) .d2b-legend-item{display:inline-block}.d2b-legend:not(.d2b-vertical) .d2b-legend-item:not(:last-child){margin-right:10px}.d2b-legend:not(.d2b-vertical) .d2b-legend-icon{margin-top:1.5px}.d2b-chart-frame{height:100%;width:100%;position:relative}.d2b-chart-frame .d2b-breadcrumbs-frame,.d2b-chart-frame .d2b-chart,.d2b-chart-frame .d2b-legend-frame{position:absolute;overflow:auto}.d2b-chart-frame .d2b-breadcrumbs-frame .d2b-breadcrumbs,.d2b-chart-frame .d2b-legend-frame .d2b-breadcrumbs{padding-left:10px;padding-right:2px}.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical),.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical){overflow-y:hidden}.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical) .d2b-breadcrumbs,.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical) .d2b-legend,.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical) .d2b-legend-item,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical) .d2b-breadcrumbs,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical) .d2b-legend,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical) .d2b-legend-item{white-space:nowrap;overflow-y:hidden}.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical).d2b-legend-frame,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical).d2b-legend-frame{height:20px;text-align:center}.d2b-chart-frame .d2b-breadcrumbs-frame:not(.d2b-vertical).d2b-breadcrumbs-frame,.d2b-chart-frame .d2b-legend-frame:not(.d2b-vertical).d2b-breadcrumbs-frame{height:55px}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-breadcrumbs-container,.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-legend-container,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-breadcrumbs-container,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-legend-container{display:table;height:100%;width:100%}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-breadcrumbs-container .d2b-legend,.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-legend-container .d2b-legend,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-breadcrumbs-container .d2b-legend,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-legend-container .d2b-legend{display:table-cell;vertical-align:middle}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-breadcrumbs-container .d2b-breadcrumbs,.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical .d2b-legend-container .d2b-breadcrumbs,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-breadcrumbs-container .d2b-breadcrumbs,.d2b-chart-frame .d2b-legend-frame.d2b-vertical .d2b-legend-container .d2b-breadcrumbs{display:table-cell;vertical-align:top}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical.d2b-breadcrumbs-frame,.d2b-chart-frame .d2b-legend-frame.d2b-vertical.d2b-breadcrumbs-frame{width:180px}.d2b-chart-frame .d2b-breadcrumbs-frame.d2b-vertical.d2b-legend-frame,.d2b-chart-frame .d2b-legend-frame.d2b-vertical.d2b-legend-frame{width:110px}',void 0);var X=function(){return Math.random().toString(36).substr(2,9)},Y=e.scaleOrdinal(e.schemeCategory10),U=function(t){return null===t?NaN:+t};v.tendancy="mean",x.tendancy="median",P.tendancy="mode",k.tendancy="range",w.tendancy="midpoint";var I=Math.PI,W=Math.sqrt(8),D=Math.sqrt(2),V={draw:function(t,e){var n=Math.sqrt(e/(I+5/4)),r=.3125*n,a=2*Math.asin(.25),o=(I/2-a)/2,i=n/W-n*Math.cos(o),l=n*Math.sin(o);t.arc(i,l,n,-o,2*I-a-o),t.lineTo(n*(5/4-1/D),-n*(1/W+5/4-1/D)),t.lineTo(n*(5/4-1/D)-r,-n*(1/W+5/4-1/D)),t.lineTo(n*(5/4-1/D)-r,-n*(1/W+7/4-1/D)),t.lineTo(n*(7/4-1/D+1/W),-n*(1/W+7/4-1/D)),t.lineTo(n*(7/4-1/D+1/W),-n*(5/4-1/D)+r),t.lineTo(n*(5/4-1/D+1/W),-n*(5/4-1/D)+r),t.lineTo(n*(5/4-1/D+1/W),-n*(5/4-1/D)),t.closePath()}},q={draw:function(t,e){var n=Math.sqrt(e/(I+5/4)),r=2*Math.asin(.25),a=n/4-n*Math.cos(r/2);t.arc(0,a,n,3*-I/2+r/2,I/2-r/2),t.lineTo(n/4,3*n/4),t.lineTo(3*n/4,3*n/4),t.lineTo(3*n/4,5*n/4),t.lineTo(n/4,5*n/4),t.lineTo(n/4,7*n/4),t.lineTo(-n/4,7*n/4),t.lineTo(-n/4,5*n/4),t.lineTo(3*-n/4,5*n/4),t.lineTo(3*-n/4,3*n/4),t.lineTo(-n/4,3*n/4),t.closePath()}},j={props:{data:{default:function(){}},config:{default:function(){return function(){}}}},computed:{properties:function(){return{generator:this.generator,data:this.data,config:this.config}}},mounted:function(){this.updateDefer(),window.addEventListener("resize",this.updateDefer),this.watcher()},methods:{watcher:function(){var t=function(){e(),this.update(),this.watcher()},e=this.$watch("properties",t,{deep:!0})},update:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=this.data;this.config(this.generator);var r=e.select(this.$el),a=t.skipTransition?r:r.transition().duration(500);r.datum(n),a.call(this.generator)},updateNow:function(){var t=this;setTimeout(function(){t.update({skipTransition:!0})},0)},updateDefer:function(){setTimeout(this.updateNow,0)}}},$={mixins:[j],template:'<div class = "d2b-vue-container d2b-vue-axis-chart"></div>',props:{generator:{default:function(){return L()}}}},H={mixins:[j],template:'<div class = "d2b-vue-container d2b-vue-pie-chart"></div>',props:{generator:{default:function(){return T()}}}},J={mixins:[j],template:'<div class = "d2b-vue-container d2b-vue-sunburst-chart"></div>',props:{generator:{default:function(){return N()}}}};t.textWrap=a,t.textWrapPX=o,t.tweenArc=l,t.tweenNumber=d,t.tweenCentroid=u,t.tooltip=p,t.tooltipAxis=h,t.stack=f,t.breadcrumbs=g,t.legend=m,t.chartFrame=y,t.defaultColor=Y,t.id=X,t.color=Y,t.omit=i,t.mean=v,t.median=x,t.mode=P,t.range=k,t.midpoint=w,t.toDegrees=F,t.toRadians=A,t.modelBase=s,t.symbolMars=V,t.symbolVenus=q,t.point=_,t.svgLegend=z,t.svgPie=M,t.svgLine=E,t.svgArea=B,t.svgScatter=G,t.svgBar=R,t.svgBubblePack=C,t.svgSunburst=S,t.plane=O,t.chartPie=T,t.chartAxis=L,t.chartSunburst=N,t.vueChartMixin=j,t.vueChartAxis=$,t.vueChartPie=H,t.vueChartSunburst=J}(this.d2b=this.d2b||{},d3);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,