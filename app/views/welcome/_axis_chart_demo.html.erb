<div class = "axis-chart-demo demo container">
  <div class = "demo-ind">
    <div class = "demo-toggle start"></div>
    <div class = "demo-message">Axis Chart</div>
  </div>
  <div class = "chart"></div>
</div>
<script>
  (function(){
    var id = "axis-chart";

    var chartContainer = d3.select('.'+id+'-demo .chart');

    var chart = d2b.CHARTS.axisChart().select('.'+id+'-demo .chart');

    var currentSlide = 0;

    var interval;

    function resize(){
      var width = chartContainer.node().getBoundingClientRect().width;
      chart
        .width(width)
        .height(600)
        .animationDuration(500);
    }

    $('.'+id+'-demo .demo-toggle').click(function(){
      var button = $(this);

      if(button.hasClass("start")) interval = setInterval(switchSlides, 2000);
      else clearInterval(interval);

      button.toggleClass("start");
      button.toggleClass("stop");
    });

    $(window).on('resize.'+id+'-demo', function(){
      resize();
      chart.animationDuration(0).update().animationDuration(500)
    });
    resize();

    function round(val){
      return Math.round(val * 100) / 100;
    }

    function switchSlides(){
      switch(currentSlide){
        case 1:
          var data = {
            data:{
              types: [
                {
                  type: 'scatter',
                  graphs: [
                    {
                        label: 'Sine',
                        values: d3.range(-Math.PI * 2, Math.PI * 2, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.sin(d))}; })
                    },
                    {
                        label: 'Cosine',
                        values: d3.range(-Math.PI * 2, Math.PI * 2, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.cos(d))}; })
                    }
                  ]
                }
              ]
            }
          };
          chart
            .data(data)
            .tooltipLayout(1)
            .update();
          break;
        case 2:
          var data = {
            data:{
              types: [
                {
                  type: 'scatter',
                  graphs: [
                    {
                        label: 'Sine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.sin(d))}; })
                    },
                    {
                        label: 'Cosine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.cos(d))}; })
                    }
                  ]
                }
              ]
            }
          };
          chart
            .data(data)
            .tooltipLayout(1)
            .update();
          break;
        case 3:
          var data = {
            data:{
              types: [
                {
                  type: 'bar',
                  graphs: [
                    {
                        label: 'Sine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.sin(d))}; })
                    },
                    {
                        label: 'Cosine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.cos(d))}; })
                    }
                  ]
                }
              ]
            }
          };
          chart
            .data(data)
            .controls({stackBars:{enabled:false}})
            .tooltipLayout(1)
            .update();
          break;
        case 4:
          var data = {
            data:{
              types: [
                {
                  type: 'bar',
                  graphs: [
                    {
                        label: 'Sine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.sin(d))}; })
                    },
                    {
                        label: 'Cosine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.cos(d))}; })
                    }
                  ]
                }
              ]
            }
          };
          chart
            .data(data)
            .controls({stackBars:{enabled:true}})
            .tooltipLayout(1)
            .update();
          break;
        case 5:
          var data = {
            data:{
              types: [
                {
                  type: 'area',
                  graphs: [
                    {
                        label: 'Sine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.sin(d))}; })
                    },
                    {
                        label: 'Cosine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.cos(d))}; })
                    }
                  ]
                }
              ]
            }
          };
          chart
            .data(data)
            .controls({stackAreas:{enabled:false}})
            .tooltipLayout(1)
            .update();
          break;
        case 6:
          var data = {
            data:{
              types: [
                {
                  type: 'area',
                  graphs: [
                    {
                        label: 'Sine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.sin(d))}; })
                    },
                    {
                        label: 'Cosine',
                        values: d3.range(-Math.PI * 2, 0, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.cos(d))}; })
                    }
                  ]
                }
              ]
            }
          };
          chart
            .data(data)
            .controls({stackAreas:{enabled:true}})
            .tooltipLayout(1)
            .update();
          break;
        default:
          var data = {
            data:{
              types: [
                {
                  type: 'line',
                  graphs: [
                    {
                        label: 'Sine',
                        values: d3.range(-Math.PI * 2, Math.PI * 2, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.sin(d))}; })
                    },
                    {
                        label: 'Cosine',
                        values: d3.range(-Math.PI * 2, Math.PI * 2, Math.PI * 1/20).map(function(d){ return {x: round(d), y: round(Math.cos(d))}; })
                    }
                  ]
                }
              ]
            }
          };
          chart
            .data(data)
            .height(600)
            .tooltipLayout(1)
            .update();
          currentSlide = 0;
      }
      currentSlide += 1;
    }

    switchSlides();

  })();
</script>
